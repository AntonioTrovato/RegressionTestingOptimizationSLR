@INPROCEEDINGS{9068003,
  author={Alkawaz, Mohammed Hazim and Silvarajoo, Abrahmi},
  booktitle={2019 IEEE 7th Conference on Systems, Process and Control (ICSPC)}, 
  title={A Survey on Test Case Prioritization and Optimization Techniques in Software Regression Testing}, 
  year={2019},
  volume={},
  number={},
  pages={59-64},
  abstract={Software Testing (ST) is vital for software development to check the degree to which it meets client's prerequisites, watch the errors or bugs in the software code and find a way to correct the mistakes to make software advantageous. For approval of changes in software, Regression Testing (RT) must be connected. RT plays it role during the software maintenance phase. It guarantees mistake free software after change during maintenance. Test cases and test suites are set up for testing, furthermore, it ought to be done in least time where Test Case Prioritization and Optimization (TCPAO) strategies are required. The fundamental point of TCPAO is to test software in least time and with greatest proficiency. This paper discusses, an empirical study on the TCPAO techniques in software RT. This study focouses on the beginners and intermediate researches. The most pertinent studies were chosen from the appropriate repositories by utilizing a lot of search keywords, inclusion/exclusion criteria. The study also discusses on the most recent papers on TCPAO technique.},
  keywords={Software;Testing;Process control;Optimization;Software algorithms;Conferences;Control systems;Software Development Life Cycle (SDLC);Regression Testing;Software Testing;Test Case Prioritization (TCP);Test Case Optimization (TCO);Test Case Selection(TCS);Test Case Minimization(TCM)},
  doi={10.1109/ICSPC47137.2019.9068003},
  ISSN={},
  month={Dec},}@INPROCEEDINGS{6818242,
  author={Sun, Shiming and Hou, Xiuping and Gao, Can and Sun, Linlin},
  booktitle={2013 Ninth International Conference on Natural Computation (ICNC)}, 
  title={Research on optimization scheme of regression testing}, 
  year={2013},
  volume={},
  number={},
  pages={1628-1632},
  abstract={Regression testing is an important process during software development. In order to reduce costs of regression testing, research on optimization of scheme of regression testing have been done in this paper. For the purpose of reducing the number of test cases and detecting faults of programs early, this paper proposed to combine test case selection with test case prioritization. Regression testing process has been designed and optimization of testing scheme has been implemented. The criterion of test case selection is modify impact of programs, finding programs which are impacted by program modification according to modify information of programs and dependencies between programs. Test cases would be selected during test case selection. The criterion of test case prioritization is coverage ability and troubleshooting capabilities of test case. Test cases which have been selected during test case selection would be ordering in test case prioritization. Finally, the effectiveness of the new method is discussed.},
  keywords={Testing;Software;Optimization;Circuit faults;Convergence;Educational institutions;Computer aided software engineering;regression testing;test case selection;test case prioritization},
  doi={10.1109/ICNC.2013.6818242},
  ISSN={2157-9563},
  month={July},}@INPROCEEDINGS{9022761,
  author={Butool, Rimsha and Nadeem, Aamer and Sindhu, Muddassar and Zaman, Oamar uz},
  booktitle={2019 22nd International Multitopic Conference (INMIC)}, 
  title={Improving Requirements Coverage in Test Case Prioritization for Regression Testing}, 
  year={2019},
  volume={},
  number={},
  pages={1-6},
  abstract={Regression testing is performed whenever software undergoes modifications, which may be due to bug fixes or feature enhancements. The purpose of regression testing is to ensure that modifications to the code do not affect the existing functionality. Regression testing is costly because the test suite might be too large to execute in full. To reduce this cost, regression testing has three main approaches, i.e., test suite minimization, test case selection and test case prioritization. Test case prioritization does not eliminate any test case rather it finds an ordered list of test cases to maximize the fault detection rate. Black box prioritization prioritizes test cases based on requirements coverage, while white box approaches prioritize test cases based on code coverage. The focus of this paper is on the black box test case prioritization using requirements coverage for regression testing. Black box prioritization is independent of the code modifications, therefore, it can be started early. The proposed approach prioritizes test cases based on the complexity of requirements covered. The existing requirements based prioritization techniques assign equal importance to each requirement when prioritizing test cases based on requirements coverage, which may not maximize fault detection rate because complex requirements may need to be tested with multiple test cases. Our proposed approach assigns weights to the requirements based on their complexity, and test cases are prioritized using these weights. Comparison with existing approach shows that the proposed approach results in better prioritization of test cases because of higher average percentage of fault detection (APFD).},
  keywords={Testing;Fault detection;Complexity theory;Software;Minimization;Computer science;Computer bugs;Regression testing;test case prioritization},
  doi={10.1109/INMIC48123.2019.9022761},
  ISSN={2049-3630},
  month={Nov},}@INPROCEEDINGS{9873649,
  author={Alkawaz, Mohammed Hazim and Silvarajoo, Abrahmi and Mohammad, Omar Farook and Raya, Lilysuriazna},
  booktitle={2022 IEEE Symposium on Industrial Electronics & Applications (ISIEA)}, 
  title={A System for Optimizing Software Regression Test Cases using Modified Ant Colony Optimization Algorithm}, 
  year={2022},
  volume={},
  number={},
  pages={1-5},
  abstract={Software Regression Testing (SRT) is directed to existing applications to ensure that an adjustment of code doesn't impact the current functionalities. Test Case Prioritization (TCP) helps with rescheduling test cases and selects according to the course of action. Ant Colony Optimization (ACO) is a streamlining calculation spurred by looking through the conduct of bugs. This paper proposes a system for optimizing SRT test cases using the Modified-Ant Colony(m-ACO) Optimization algorithm. m-ACO is the modification of the ACO strategy. It rearranges the conduct grouping of test cases by switching the marvel of trademark bugs for picking the nourishment. The proposed system has been tried for Zasta Billing Web Application (ZBWA) and contrasted with the days to finish the SRT manually and utilize the suggested approach. The recommended system assists with diminishing the days conducted SRT from 90 days to 45 days to accomplish the period for SRT in that firm.},
  keywords={Software testing;Ant colony optimization;Codes;Computer bugs;Software algorithms;Switches;Trademarks;Software Testing (ST);Software Regression Testing;Test Case Prioritization;Test Case Selection (TCS);Test Case Minimization (TCM);Ant Colony Optimization;Modified Ant Colony Optimization},
  doi={10.1109/ISIEA54517.2022.9873649},
  ISSN={2472-7660},
  month={July},}@INPROCEEDINGS{7561371,
  author={Srisura, Benjawan and Lawanna, Adtha},
  booktitle={2016 13th International Conference on Electrical Engineering/Electronics, Computer, Telecommunications and Information Technology (ECTI-CON)}, 
  title={False test case selection: Improvement of regression testing approach}, 
  year={2016},
  volume={},
  number={},
  pages={1-6},
  abstract={Regression testing has been considered as a time-consumed process in software testing. In a recent year, one of interesting research work initiated for minimizing testing time is finding a technique in selecting test cases from a large test suit. Most of test cases selection technique in literature considers test cases that are related to the requirement's changed. During executing test cases that are related to the modified part, a set of fail test case is accidentally emerged and make test suit has become larger. Therefore, this paper proposes a technique in selecting suitable false test cases when they are generated in regression testing. However, in order to ensure that the quality and validity of using the proposed technique are acceptable, an experiment was systematically conducted in this study. And we also found that the false test case selection technique can minimize the size of test suit, effectively.},
  keywords={Software;Software testing;Productivity;Flow graphs;Algorithm design and analysis;Information technology;Test case selection;Regression Test Case Selection;Regression Testing;Sotware Testing},
  doi={10.1109/ECTICon.2016.7561371},
  ISSN={},
  month={June},}@INPROCEEDINGS{6884931,
  author={Tyagi, Manika and Malhotra, Sona},
  booktitle={2014 International Conference on Signal Propagation and Computer Technology (ICSPCT 2014)}, 
  title={Test case prioritization using multi objective particle swarm optimizer}, 
  year={2014},
  volume={},
  number={},
  pages={390-395},
  abstract={The goal of regression testing is to validate the modified software. Due to the resource and time constraints, it becomes necessary to develop techniques to minimize existing test suites by eliminating redundant test cases and prioritizing them. This paper proposes a 3-phase approach to solve test case prioritization. In the first phase, we are removing redundant test cases by simple matrix operation. In the second phase, test cases are selected from the test suite such that selected test cases represent the minimal set which covers all faults and also at the minimum execution time. For this phase, we are using multi objective particle swarm optimization (MOPSO) which optimizes fault coverage and execution time. In the third phase, we allocate priority to test cases obtained from the second phase. Priority is obtained by calculating the ratio of fault coverage to the execution time of test cases, higher the value of the ratio higher will be the priority and the test cases which are not selected in phase 2 are added to the test suite in sequential order. We have also performed experimental analysis based on maximum fault coverage and minimum execution time. The proposed MOPSO approach is compared with other prioritization techniques such as No Ordering, Reverse Ordering and Random Ordering by calculating Average Percentage of fault detected (APFD) for each technique and it can be concluded that the proposed approach outperformed all techniques mentioned above.},
  keywords={Regression Testing;Test case selection;Test case prioritization;Multi objective Particle Swarm Optimization},
  doi={10.1109/ICSPCT.2014.6884931},
  ISSN={},
  month={July},}@INPROCEEDINGS{10048797,
  author={Chaudhary, Sonam and Choudhary, Ankur and Seth, Jyotsna},
  booktitle={2023 13th International Conference on Cloud Computing, Data Science & Engineering (Confluence)}, 
  title={Nature Inspired Approaches for Test Case Selection in Regression Testing: A Review}, 
  year={2023},
  volume={},
  number={},
  pages={644-649},
  abstract={To ensure that the software satisfies all necessary criteria, software testing is done. Regression Testing is an important part of software testing as it plays a crucial role in software testing procedure. It's done to make sure that everything works as it should, such that test cases with greater potential to discover faults are given higher priority. Test case selection is introduced to choose the most effective subset of test cases from a test suite, test case selection reduces the total cost, time, and effort necessary in the process of software testing. It works by removing the obsolete and redundant test cases. Within all the computational intelligence algorithms the nature inspired algorithms are highly demanded due to their increased efficiency in solving complex problems. Nature Inspired Approaches refers to the approaches derived directly from the nature. Nature acts as the main branch of knowledge that provides various solution for the complex problems. Incorporation of Nature Inspired Approaches in test case selection problem generates a subset of test cases from the test suite resulting in time, cost and effort reduction. With the use of research questions, this paper offers a thorough review of Test Case Selection methods utilizing Nature Inspired Approaches.},
  keywords={Software testing;Costs;Software algorithms;Metaheuristics;Search problems;Software;Computational intelligence;Software Testing;Regression Testing;Test Case Selection;Nature Inspired Approaches},
  doi={10.1109/Confluence56041.2023.10048797},
  ISSN={},
  month={Jan},}@INPROCEEDINGS{9990042,
  author={Naheed, Misbah and Nadeem, Aamer and Zaman, Qamar Uz},
  booktitle={2022 19th International Bhurban Conference on Applied Sciences and Technology (IBCAST)}, 
  title={A Requirement Based Approach to Test Case Prioritization for Regression Testing}, 
  year={2022},
  volume={},
  number={},
  pages={358-363},
  abstract={Testing is the strategy wherein a program is executed fully intent on tracking down bugs. Whenever modification is done it is verified again to ensure that there are no new flaws have emerged in the previously tested code and that it continues to function effectively. This kind of testing is called regression testing. Original program may have many test cases and executing the whole test suite may increase the cost of testing. Regression test selection, test suite minimization and the test case prioritization are three strategies of regression testing which lower cost of regression testing. In test case selection and minimization techniques, only few test cases are chosen and the leftover test cases are squandered. The risk is that useful test cases with respect to fault detection may be discarded while in prioritization the software tester prioritizes the test and test cases that are more suitable to detect errors early are run first. There is no risk of important test case elimination in this technique as compared to other techniques. Therefore, test case prioritization is more effective and time saving. In test case prioritization technique important test cases are placed first in the prioritization list. Maximize early fault detection is goal of prioritization. In prioritization, technique test cases are ranked according to some coverage criteria. Existing techniques use total coverage strategy for prioritization of test cases by considering the total number of requirements covered. There may be more than one test case that covers the same requirements. Therefore, there is a possibility to repeat the test cases that cover same requirements, which is not desirable. In this research, we offer a new test case prioritizing technique based on prioritized requirements. This algorithm uses the "Additional" coverage strategy. Test case that covers the most requirements and has the highest weight is given high priority by our algorithm. Our suggested prioritization algorithm outperforms than existing techniques as it gives earlier coverage of requirements.},
  keywords={Costs;Codes;Fault detection;Computer bugs;Minimization;Software;Testing;Test case prioritization;Prioritized Requirements;Software Testing},
  doi={10.1109/IBCAST54850.2022.9990042},
  ISSN={2151-1411},
  month={Aug},}@INPROCEEDINGS{10685192,
  author={Sawant, Priyanka Dattatray},
  booktitle={2024 IEEE International Conference on Artificial Intelligence Testing (AITest)}, 
  title={Test Case Prioritization for Regression Testing Using Machine Learning}, 
  year={2024},
  volume={},
  number={},
  pages={152-153},
  abstract={In order to make sure that recent code changes haven't negatively impacted the software's current functionalities, regression testing is a crucial maintenance step in the software development lifecycle. Time and resource constraints make it impractical to run every test case during regression testing, especially as software systems get larger and more complex. This problem is addressed by test case prioritization (TCP) techniques, which arrange test cases in a way that maximizes the probability of finding errors early on. Several of advanced machine learning (ML) techniques that have recently shown great promise in improving the efficacy and efficiency of the prioritization process when integrated with TCP. The methods, advantages, and drawbacks of these cutting-edge ML-based approaches for TCP are examined in this paper. I present a comparative analysis of their performance metrics and provide an implementation example for TCP using ensemble methods in machine learning. Practical considerations such as data requirements, model selection, and integration with current continuous integration/continuous deployment (CI/CD) pipelines are covered when implementing these advanced ML-based TCP methods in real-world scenarios. The results show that advanced ML based TCP is a useful tactic for contemporary regression testing procedures since it enhances fault detection rates and maximizes resource utilization.},
  keywords={Measurement;Fault detection;Refining;Pipelines;Software systems;Resource management;Ensemble learning;Regression testing;test case prioritization;machine learning;ensemble methods;continuous integration;continuous deployment},
  doi={10.1109/AITest62860.2024.00027},
  ISSN={2835-3560},
  month={July},}@INPROCEEDINGS{7339054,
  author={Gao, Dongdong and Guo, Xiangying and Zhao, Lei},
  booktitle={2015 6th IEEE International Conference on Software Engineering and Service Science (ICSESS)}, 
  title={Test case prioritization for regression testing based on ant colony optimization}, 
  year={2015},
  volume={},
  number={},
  pages={275-279},
  abstract={Test case prioritization technique is an efficient method to improve regression testing activities. It orders a regression test suite to execute the test cases with higher priority earlier than those with lower priority, and the problem is how to optimize the test case ordering according to some criterion. In this paper, we have proposed an algorithm which prioritizes the test cases based on ant colony optimization (ACO), considering three factors: number of faults detected, execution time and fault severity, and these three factors are used in ant colony optimization algorithm to help to reveal more severe faults at earlier stage of the regression testing process. The effectiveness of the algorithm is demonstrated using the metric named APFD, and the results of experiment show the algorithm optimizes the test case orderings effectively.},
  keywords={Testing;Fault detection;Ant colony optimization;Algorithm design and analysis;Measurement;Software;Optimization;test case prioritization;ant colony optimization;regression testing},
  doi={10.1109/ICSESS.2015.7339054},
  ISSN={2327-0594},
  month={Sep.},}@INPROCEEDINGS{8777692,
  author={Bajaj, Anu and Sangwan, Om Prakash},
  booktitle={2018 4th International Conference on Computing Communication and Automation (ICCCA)}, 
  title={A Survey on Regression Testing Using Nature-Inspired Approaches}, 
  year={2018},
  volume={},
  number={},
  pages={1-5},
  abstract={Efficient regression testing plays an important role for organizations that have large investment in active, ever-changing software development. Efficiency can be obtained by optimizing the test cases as it provides a balance between the safety and precision. Many optimization techniques from various domains have been applied in regression testing for optimizing the search and the solutions. But nature-inspired algorithms are gaining more popularity now a days as the algorithms are more efficient for complex problems. In this paper, we have explored the research work done by various researchers on regression testing using nature-inspired approaches. It is found that biology inspired computation e.g. genetic algorithm have been widely used in regression testing optimization with the intent of maximizing fault or code coverage in minimum time. It is also concluded that nature-inspired approaches have great potential to optimize regression testing problems.},
  keywords={Testing;Genetic algorithms;Optimization;Biology;Minimization;Fault detection;Software;regression testing;test case optimization;test suite minimization;test case prioritization;test case selection;nature-inspired algorithms;genetic algorithm},
  doi={10.1109/CCAA.2018.8777692},
  ISSN={2642-7354},
  month={Dec},}@INPROCEEDINGS{8377903,
  author={Ren, Yijie and Yin, Bei-Bei and Wang, Bin},
  booktitle={2018 IEEE 42nd Annual Computer Software and Applications Conference (COMPSAC)}, 
  title={Test Case Prioritization for GUI Regression Testing Based on Centrality Measures}, 
  year={2018},
  volume={02},
  number={},
  pages={454-459},
  abstract={Regression testing has been widely used in GUI software testing. For the reason of economy, the prioritization of test cases is particularly important. However, few studies discussed test case prioritization (TCP) for GUI software. Based on GUI software features, a two-layer model is proposed to assist the test case prioritization in this paper, in which, the outer layer is an event handler tree (EHT), and the inner layer is a function call graph (FCG). Compared with the conventional methods, more source code information is used based on the two-layer model for prioritization. What is more, from a global perspective, centrality measure, a complex network viewpoint is used to highlight the importance of modified functions for specific version TCP. The experiment proved the effectiveness of this model and this method.},
  keywords={Graphical user interfaces;Software;Object oriented modeling;Complex networks;Software testing;Regression tree analysis;GUI Testing, Regression Testing, Test Case Prioritization, Event Handler Tree, Complex Network},
  doi={10.1109/COMPSAC.2018.10275},
  ISSN={0730-3157},
  month={July},}@INPROCEEDINGS{10958234,
  author={Ndlovu, Siqabukile and Mnkandla, Ernest},
  booktitle={2024 3rd Zimbabwe Conference of Information and Communication Technologies (ZCICT)}, 
  title={A Preliminary Framework for Optimising Test Case Selection Using Natural Language Processing and Test Case Prioritisation Using Deep Learning in Continuous Integration}, 
  year={2024},
  volume={},
  number={},
  pages={1-5},
  abstract={Regression testing, though crucial for software quality, is extremely time consuming especially in continuous integration environments. Test case prioritisation can however improve the efficiency of this process by re-ordering test execution. However, due to the growing volume of test cases in continuous integration, effective selection and prioritisation of test cases is a noteworthy challenge. This paper focusses on improving test case selection and test case prioritisation for regression testing in dynamic continuous integration environments. By applying natural language processing to semantically analyse test cases to include implicit test cases in testing, and deep learning to prioritise the most impactful test cases, this approach will reduce the time and resources required for regression testing while maintaining high fault detection and feedback transmission rates. This early stage research paper proposes a new conceptual framework for optimising regression testing in continuous integration environments using natural language processing and deep learning and outlines potential challenges and future research. The expected outcomes of this proposed framework include improved fault detection rates, reduced overall testing time, and improved resource utilisation. The effectiveness of the framework will be evaluated using metrics such as fault detection rate, testing cycle duration, and computational resource efficiency, providing a comprehensive assessment of its impact on software quality assurance.},
  keywords={Deep learning;Measurement;Fault detection;Semantics;Software quality;Continuous integration;Natural language processing;Information and communication technology;Resource management;Testing;Regression Testing;Continuous Integration;Natural Language Processing;Deep Learning;Test Case Selection;Test Case Prioritisation},
  doi={10.1109/ZCICT63770.2024.10958234},
  ISSN={},
  month={Nov},}@INPROCEEDINGS{6676952,
  author={Marijan, Dusica and Gotlieb, Arnaud and Sen, Sagar},
  booktitle={2013 IEEE International Conference on Software Maintenance}, 
  title={Test Case Prioritization for Continuous Regression Testing: An Industrial Case Study}, 
  year={2013},
  volume={},
  number={},
  pages={540-543},
  abstract={Regression testing in continuous integration environment is bounded by tight time constraints. To satisfy time constraints and achieve testing goals, test cases must be efficiently ordered in execution. Prioritization techniques are commonly used to order test cases to reflect their importance according to one or more criteria. Reduced time to test or high fault detection rate are such important criteria. In this paper, we present a case study of a test prioritization approach ROCKET (Prioritization for Continuous Regression Testing) to improve the efficiency of continuous regression testing of industrial video conferencing software. ROCKET orders test cases based on historical failure data, test execution time and domain-specific heuristics. It uses a weighted function to compute test priority. The weights are higher if tests uncover regression faults in recent iterations of software testing and reduce time to detection of faults. The results of the study show that the test cases prioritized using ROCKET (1) provide faster fault detection, and (2) increase regression fault detection rate, revealing 30% more faults for 20% of the test suite executed, comparing to manually prioritized test cases.},
  keywords={Testing;Rockets;Fault detection;Software;Manuals;Time factors;Linear programming;software testing;continuous integration;regression testing;test case prioritization;history-based prioritization},
  doi={10.1109/ICSM.2013.91},
  ISSN={1063-6773},
  month={Sep.},}@INPROCEEDINGS{7045344,
  author={Sharma, Neha and Sujata and Purohit, G.N.},
  booktitle={2014 International Conference on High Performance Computing and Applications (ICHPCA)}, 
  title={Test case prioritization techniques “an empirical study”}, 
  year={2014},
  volume={},
  number={},
  pages={1-6},
  abstract={Regression testing is an expensive process. A number of methodologies of regression testing are used to improve its effectiveness. These are retest all, test case selection, test case reduction and test case prioritization. Retest all technique involves re-execution of all available test suites, which are critical moreover cost effective. In order to increase efficiency, test case prioritization is being utilized for rearranging the test cases. A number of algorithms has been stated in the literature survey such as Greedy Algorithms and Metaheuristic search algorithms. A simple greedy algorithm focuses on test case prioritization but results in less efficient manner, due to which researches moved towards the additional greedy and 2-Optimal algorithms. Forthcoming metaheuristic search technique (Hill climbing and Genetic Algorithm) produces a much better solution to the test case prioritization problem. It implements stochastic optimization while dealing with problem concern. The genetic algorithm is an evolutionary algorithm which gives an exact mathematical fitness value for the test cases on which prioritization is done. This paper focuses on the comparison of metaheuristic genetic algorithm with other algorithms and proves the efficiency of genetic algorithm over the remaining ones.},
  keywords={Genetics;Computers;Genetic algorithms;Testing;regression testing;test case prioritization;genetic algorithm;greedy algorithm;APFD},
  doi={10.1109/ICHPCA.2014.7045344},
  ISSN={},
  month={Dec},}@INPROCEEDINGS{8343055,
  author={Mahmood, Md. Hasan and Hosain, Md. Shazzad},
  booktitle={2017 8th IEEE International Conference on Software Engineering and Service Science (ICSESS)}, 
  title={Improving test case prioritization based on practical priority factors}, 
  year={2017},
  volume={},
  number={},
  pages={899-902},
  abstract={Test case prioritization involves prioritized the test cases for regression testing which improve the effectiveness of the testing process. By improving test case scheduling we can optimize time and cost as well as can produce better tested products. There are a number of methods to do prioritized test cases but not that effective or practical for the real-life large commercial systems. Most of the technique deals with finding defects or covering more test cases. In this paper, we will extend the previous work to incorporate real life practical aspects to schedule test cases. This will cover most of the businesses functionally based on the practical aspects. This approach covers more business area and ensure more defects. By prioritized test cases with this technique we will cover most important business functionally with less number of test cases.},
  keywords={Complexity theory;Testing;Computer bugs;Business;Fault detection;Software systems;Test case;Test case prioritization;Test case prioritization methods;Regression Testing},
  doi={10.1109/ICSESS.2017.8343055},
  ISSN={2327-0594},
  month={Nov},}@INPROCEEDINGS{7079143,
  author={Sujata and Purohit, G.N.},
  booktitle={2015 Fifth International Conference on Advanced Computing & Communication Technologies}, 
  title={A Schema Support for Selection of Test Case Prioritization Techniques}, 
  year={2015},
  volume={},
  number={},
  pages={547-551},
  abstract={Regression testing is a vast field of research. It is very costly and time consuming process but on the other hand very important process in software testing. Retest all, Test case Selection, Hybrid and Test Case Prioritization are its various techniques which are used to reduce the efforts in maintenance phase. In technical literature several techniques are present with their different and vast number of goals which can be applied in software projects despite of that they have not proven their true efficiency in the testing process. The major problem in regression testing area is to select the test case prioritization technique/s that is effective in such a way that maximum project characteristics should be cover in a minimum time span. However, consideration of this decision be carefully done so that loss of resources can be avoided in a software project. Based on the above scenario, author proposes a selection schema to support the selection of TCP techniques for a given software project aiming at maximizing the coverage of software project characteristics considering aspect of prioritization of software project characteristics. At the end, preliminary results of an experimental evaluation are presented. The purpose of this research is decision should be based on the objective knowledge of the techniques rather than considering some perception and assumptions.},
  keywords={Software;Maintenance engineering;Software algorithms;Software testing;Reliability;Estimation;regression testing;project characteristics;selection schema;test case prioritization techniques},
  doi={10.1109/ACCT.2015.91},
  ISSN={2327-0659},
  month={Feb},}@INPROCEEDINGS{8711039,
  author={Dhiman, Riza and Chopra, Vinay},
  booktitle={2019 IEEE 2nd International Conference on Information and Computer Technologies (ICICT)}, 
  title={Novel Approach for Test Case Prioritization Using ACO Algorithm}, 
  year={2019},
  volume={},
  number={},
  pages={292-295},
  abstract={Regression testing is used to retest the component of a system that verifies that after modifications defects are removed from the in effected software. Automation tools are required for these types of testing. This work is based on manual slicing and automated slicing for test case prioritization to detect maximum number of faults from the project in which some changes are done for the new version release. The slicing is the technique which will divide the whole project function wise and detect associated functions. To test the performance of proposed and existing algorithm MATLAB is being used by considering the dataset of ten projects. Each project has seven functions and four numbers of changes are defined for the regression testing. In the simulation it is being analyzed that fault detection rate is increased and execution time is reduced with the implementation of automated test case prioritization as compared to manual test case prioritization in regression testing.},
  keywords={Testing;Manuals;Fault detection;Software;Optimization;Performance analysis;Software algorithms;test case prioritization;ACO;regression testing},
  doi={10.1109/INFOCT.2019.8711039},
  ISSN={},
  month={March},}@INPROCEEDINGS{7724418,
  author={Yadav, Dharmveer Kumar and Dutta, Sandip},
  booktitle={2016 3rd International Conference on Computing for Sustainable Global Development (INDIACom)}, 
  title={Test case prioritization technique based on early fault detection using fuzzy logic}, 
  year={2016},
  volume={},
  number={},
  pages={1033-1036},
  abstract={Regression testing is time consuming and expensive activity in software testing. In Regression testing when any changes made to already tested program it should not affect to other part of program. Regression testing is crucial activities in software testing and maintenance phases. If some part of code is altered then it is mandatory to validate the modified code. Throughout regression testing test case from test suite will be re-executed and re-execution of all the test case will be very expensive. In this paper we present regression test case prioritization for object oriented program. The most important research is how to select efficient and suitable test cases during regression testing from the test suite. To minimize the regression testing cost we have applied prioritization technique. In this paper prioritization is done based on fault detection rate of program, execution time and requirement coverage using fuzzy logic.},
  keywords={Testing;Measurement;Fault detection;Software;Conferences;Software engineering;Fuzzy logic;Regression testing;Test case prioritization;APFD metric;Fuzzy inference system (FIS)},
  doi={},
  ISSN={},
  month={March},}@INPROCEEDINGS{9198020,
  author={Vats, Prashant and Gossain, Anjana and Mandot, Manju},
  booktitle={2020 8th International Conference on Reliability, Infocom Technologies and Optimization (Trends and Future Directions) (ICRITO)}, 
  title={SARLA - A 3-Tier Architectural Framework Based on the ACO for the Probablistic Analysis of the Regression Test Case Selection and their Prioritization}, 
  year={2020},
  volume={},
  number={},
  pages={681-687},
  abstract={Software testing is a process of testing Software under Test (SUT) with the intent of finding errors in it & plays a major role in the software development process. Further the Maintenance phase of any software product needed to go through a series of Regression testing process. In Regression Testing, It is required to retest the existing software module whenever any modification is done to that module in order to see & check its functioning after the removal of errors in it. During the Regression Testing it is a necessary habit that we use to perform certain steps like Test case selection, their effective prioritization. To select and chose an effective set of prioritized test cases that ensures that all the faults are being covered quickly with the minimum execution time. So in other words, we can say that Regression test selection is a process of reducing the number of test suites by selecting the appropriate subsets from an original test suite to ensure the hundred percent code coverage of a SUT. In this paper, we have proposed a 3-tier Architectural framework called SARLA that provides us a cost effective method for the probabilistic analysis of the Regression test case selection and their prioritization based upon the Ant Colony Optimization (ACO) technique.},
  keywords={Testing;Software;Genetic algorithms;Probabilistic logic;Ant colony optimization;Fault detection;Measurement;Regression Testing;Test case selection;Test suite prioritization;ACO.},
  doi={10.1109/ICRITO48877.2020.9198020},
  ISSN={},
  month={June},}@INPROCEEDINGS{8776936,
  author={Padmnav, Pushkar and Pahwa, Gaurav and Singh, Dinesh and Bansal, Saurabh},
  booktitle={2019 9th International Conference on Cloud Computing, Data Science & Engineering (Confluence)}, 
  title={Test Case Prioritization based on Historical Failure Patterns using ABC and GA}, 
  year={2019},
  volume={},
  number={},
  pages={293-298},
  abstract={Regression testing is defined as type of software testing carried out to ensure that no new bugs are introduced due to modifications to existing code or addition of new features. Prioritization techniques order the set of test cases for improved & effective testing. Test Case Prioritization (TCP) in corrective regression testing is an indispensable arsenal to help discover faults faster during the initial phase of testing. Many techniques have been proposed for Test Case Prioritization (TCP) based on requirement correlation, test coverage, information retrieval which are dependent on data which is not easily available. Our approach considers the historical execution of the regression cycles through use of Artificial Bee Colony Optimization (Swarm Intelligence) & Genetic Algorithm for fault detection with improved results.},
  keywords={Testing;Genetic algorithms;Optimization;Particle swarm optimization;Software;Measurement;Computer bugs;Test Case Prioritization;Regression Testing;APFD;Artificial Bee Colony Optimization;Genetic algorithm;Corrective Regression Testing;Swarm Intelligence},
  doi={10.1109/CONFLUENCE.2019.8776936},
  ISSN={},
  month={Jan},}@INPROCEEDINGS{10197719,
  author={Xiao, Zhengxinchao and Xiao, Lei},
  booktitle={2023 IEEE/ACIS 21st International Conference on Software Engineering Research, Management and Applications (SERA)}, 
  title={A Systematic Literature Review on Test Case Prioritization and Regression Test Selection}, 
  year={2023},
  volume={},
  number={},
  pages={235-242},
  abstract={Regression testing is a crucial component of software testing and a crucial tool for ensuring the quality of software. An appropriate optimization method is essential for maximizing productivity and reducing expenses in regression testing. Test case prioritization (TCP) and regression test selection (RTS) are two popular methods in regression testing. This paper provides a qualitative analysis of 18 TCP and 17 RTS publications from the last five years. This paper presents four main issues. The first covers the most popular TCP techniques, the second covers the most popular RTS methods, the third covers the most popular metrics for measuring TCP and RTS, and the fourth covers data sources. Based on this study, we draw the following conclusions: (1) Defect prediction and machine learning-based TCP methods, machine learning, multi-objective, and model-based RTS methods will receive additional attention in future. (2) Defects4J is the most commonly used data set in TCP in the past five years. SIR and GitHub are the most commonly used datasets in RTS. (3) The most widely used measurement methods in TCP and RTS are APFD and cost, respectively. In future, researchers will use these two indicators to conduct a more comprehensive evaluation together with cost, fault detection capability, and test coverage.},
  keywords={Software testing;Productivity;Costs;Systematics;Bibliographies;Soft sensors;Optimization methods;Regression testing;Test case prioritization;Test case selection;Systematic literature review},
  doi={10.1109/SERA57763.2023.10197719},
  ISSN={2770-8209},
  month={May},}@INPROCEEDINGS{10633335,
  author={Ahmad, Azeem and Rentas, Dimistris and Hasselqvist, Daniel and Sandberg, Pontus and Sandahl, Kristian and Vulgarakis, Aneta},
  booktitle={2024 IEEE 48th Annual Computers, Software, and Applications Conference (COMPSAC)}, 
  title={Test Case Selection in Continuous Regression Testing Using Machine Learning: An Industrial Case Study}, 
  year={2024},
  volume={},
  number={},
  pages={33-38},
  abstract={Continuous integration and delivery (CI/CD) have transformed software development by reducing delivery time, improving product quality, and giving enterprises a competitive advantage. However, large-scale projects confront difficulties in giving fast feedback to developers due to large test suites, resulting in longer testing cycles and lower productivity. Traditional regression testing methods struggle to find a balance between efficacy and efficiency, demanding advanced approaches. This study investigates the use of machine learning (ML), specifically Neural Network and Random Forest models, to choose test cases based on source code changes, commit messages, and change file path in order to offer developers with faster feedback. The study investigates the predicted accuracy of ML models using a large industrial dataset from a telecom company, which included 15 million test executions over 15 months. The results show that Random Forest outperforms Neural Network models in test case selection, with up to 97% accuracy achieved. Real-time evaluations conducted over a month show significant savings in test executions (88 % -90 %) and testing time (44 % -74%) across multiple regression testing activities, illustrating the potential of ML-driven techniques to optimize CI/CD pipelines and increase developer productivity.},
  keywords={Productivity;Accuracy;Source coding;Computational modeling;Neural networks;Predictive models;Real-time systems;Test Case Selection;Machine Learning Models;Test Case Selection on Code Changes;Multi-factor Test Case Selection},
  doi={10.1109/COMPSAC61105.2024.00015},
  ISSN={2836-3795},
  month={July},}@INPROCEEDINGS{8261011,
  author={Farooq, Faiza and Nadeem, Aamer},
  booktitle={2017 International Conference on Frontiers of Information Technology (FIT)}, 
  title={A Fault Based Approach to Test Case Prioritization}, 
  year={2017},
  volume={},
  number={},
  pages={52-57},
  abstract={Regression testing is performed to ensure that the no new faults have been introduced in the software after modification and the software continues to work correctly. Regression testing is an expensive process because the test suite might be too large to execute in full. Thus to reduce the cost of such testing, regression testing techniques are used. One such technique is test case prioritization. Software testers assign priority to each test case to make sure that the test cases with higher priorities are executed first, in case of not having enough resources to execute the whole test suite. Test case prioritization is mainly used to increase fault detection rate of test suite which is the measure of how early faults are detected. In this paper, we propose an approach which exploits mutation testing in order to assign priorities to test cases. Using mutation testing, we introduce different faults in original program thus creating a number of mutated copies of the program and test case that exposes maximum number of these faults is given the highest priority. We report the outcomes of our experiments in which we applied our technique to test suites and calculated the fault detection rates produced by the prioritized test suites, comparing those rates of fault detection to the rates achieved by existing prioritization technique. The resulting data shows that prioritization technique proposed improved the fault detection rate of test suites.},
  keywords={Testing;Fault detection;Software;Minimization;Computer science;History;Information technology;Regression testing;Test case prioritization;Mutation testing},
  doi={10.1109/FIT.2017.00017},
  ISSN={},
  month={Dec},}@INPROCEEDINGS{6630498,
  author={Larprattanakul, Adipat and Suwannasart, Taratip},
  booktitle={2013 5th International Conference on Intelligent Networking and Collaborative Systems}, 
  title={An Approach for Regression Test Case Selection Using Object Dependency Graph}, 
  year={2013},
  volume={},
  number={},
  pages={617-621},
  abstract={Regression testing is one important step in software development activities to ensure a new change does not have a negative impact to unchanged parts. Regression test case selection is an approach to reduce time and resource consumption in regression testing. We present a framework of regression test case selection by using object dependency graph as a change identifier and identifying the test cases which are worthwhile to be rerun in object-oriented software.},
  keywords={Testing;Object recognition;Databases;Software maintenance;Object oriented programming;Computers;object dependency graph;regression testing;regression test case selection},
  doi={10.1109/INCoS.2013.115},
  ISSN={},
  month={Sep.},}@INPROCEEDINGS{9160217,
  author={Ashima and Shaheamlung, Golmei and Rote, Ketusezo},
  booktitle={2020 International Conference on Intelligent Engineering and Management (ICIEM)}, 
  title={A comprehensive review for test case prioritization in Software Engineering}, 
  year={2020},
  volume={},
  number={},
  pages={331-336},
  abstract={In the past years, test case prioritization has been improved in the regression testing by the use of effective test cases. The continuous improvement and attention have increased in terms of prioritization algorithm, coverage criteria, measurement, application scenario and the practice concerned. It has focused mainly on Prioritizing and scheduling the test cases. The main purpose of this paper is to study the different prioritization techniques used by various authors in previous years. Regression testing, a type of testing in which is being used as a tool for checking, testing, and up-gradation of software. The test cases of all scheduling and prioritizing are set in the ordered and proper method and as result, this case shows the detection and a maximum number of faults in the software in which the technical faults are traced and detected as the detected faults. Through the fault detection of the test case, it reduces the test case and minimizes the execution cost. As a result, this method shows the running of the test case at a higher priority in order to reduce and minimize the cost, time and effort of software testing.},
  keywords={Software;Optimization;Software testing;Computer science;Job shop scheduling;Fault detection;Regression Testing;Test case prioritization;Prioritization algorithm},
  doi={10.1109/ICIEM48762.2020.9160217},
  ISSN={},
  month={June},}@INPROCEEDINGS{10675906,
  author={Fariha, Asma and Azim, Akramul and Liscano, Ramiro},
  booktitle={2024 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)}, 
  title={Replay-Based Continual Learning for Test Case Prioritization}, 
  year={2024},
  volume={},
  number={},
  pages={106-107},
  abstract={In a large-scale Continuous Integration (CI) environment, regression testing can encounter high time and resource demands in ad hoc execution. Therefore, Test Case Prioritization (TCP) is crucial for enhancing the regression testing efficiency of CI. TCP methods aim to optimize regression testing by ordering test cases to effectively cover new code changes and their potential side effects and to maximize early fault detection. Traditional prioritization processes use diverse data sources, including code coverage analysis, test execution history, and domain-specific features. Heuristic-based or code-coverage-driven prioritization techniques may not be sufficient for accurate results in a rapidly changing environment. For this reason, there has been a significant shift towards employing Machine Learning (ML) techniques in TCP in recent years to harness the vast and complex datasets generated by CI practices. ML-based TCP approaches integrate multifaceted test case features from various sources to enhance the accuracy of test case prioritization. This trend reflects a broader movement towards data-driven decisionmaking in software testing, offering the potential to significantly reduce the regression testing burden by tailoring test suites more effectively to the needs of each software build, thereby saving time and resources while maintaining or improving the software quality. Recent studies have shown that the ML-based methods used in TCP can be categorized into four groups: Supervised Learning, Unsupervised Learning, Reinforcement Learning, and Natural Language Processing. Codebases for software projects can be changed rapidly by introducing new feature distributions into the CI systems. We analyzed a Java application’s CI and version control system (VCS) history data received from the International Business Machines Corporation (IBM) [1], [6], [7]. The frequent inclusion of new test suites introduced new patterns into the dataset properties. To keep up with these changes, ML models require frequent re-training on old and new datasets to maintain high accuracy on new data. The volume of the dataset tends to increase with time as more data becomes available. Frequent re-training of ML models on the entire dataset is computationally costly and requires extensive storage. Reinforcement Learning focuses on finding the best solution through reward maximization [2] and restricts the learning goal. Learning incrementally from new non-stationary data without requiring an old dataset to solve this TCP problem. Continual Learning (CL) or life-long learning/ incremental learning adapts to changes without needing old training samples. While CL has recently been studied in several works for different domains, we could not find effective research on implementing CL in the TCP domain. Given the dynamic environment of software testing, we apply CL in industrial test case prioritization is critical for maintaining the efficiency and effectiveness of software testing processes in dynamic environments. However, modifying ML models on new datasets may introduce other problems, such as catastrophic forgetting. This can occur when the model is trained on a new distribution, and the model weights change drastically. Different strategies have been suggested to solve the problem of catastrophic forgetting in CL. This abstract discusses the integration of pre-training and replay-based continual learning methods to enhance test case prioritization. Pre-trainingbased continual learning leverages the strong representation of pre-training models on a large dataset. This approach helps initialize the model with a broad understanding, which can be further incrementally trained to accommodate new tasks without significant performance loss on previous tasks. The dataset we obtained from IBM has a few years of test execution data for the CI and VCS. The model can be trained using a large volume of data for the pre-training method. Replay-based continual learning, however, involves retaining a small buffer of old training samples. This strategy includes a small fraction of old samples with a new dataset while incrementally training the model, enabling it to maintain its performance on older tasks by reinforcing the previous learning. Integrating pre-training and replay-based methods is most effective in the literature [3]. Pre-training provides a solid foundation for generic knowledge; replay-based methods complement this by continuously reinforcing past learning, ensuring that the adaptation to new tasks does not come at the expense of previously acquired knowledge. Several design choices leverage the benefits of this combined method. The frequency of incremental training on new datasets is an important design decision. This frequency can be timedriven or property-driven. Experimental work will guide the decision on incremental training frequency. Next, in replay-based approaches, the memory buffer size, number of old samples, and criteria for old sample selection are some of the decision parameters. In addition, a small buffer memory requires effective management in terms of data-retaining strategies. The empirical evidence supports the effectiveness of this integrated approach. Hu et al. [4] introduced prioritized experience replay in continual learning, emphasizing the selection of representative experiences to alleviate catastrophic forgetting. Similarly, Merlin et al. [5] provided practical recommendations for replay-based continual learning methods, highlighting the importance of memory size and data augmentation in enhancing the performance. We will conduct detailed investigations to determine the optimal values for these decision parameters. For time-based frequency, we will experiment at different intervals, such as weekly, every ten or 15 days, monthly, three months, and six months of incremental training. Property-based choices can be new test suite additions, significant changes in test suites, and an increase or decrease in the test case failure rate. Similarly, for the replay-based method, samples can be selected from each incremental training dataset; the selection can be random or property-based. For example, an even distribution of passed or failed samples could be selected to avoid overfitting. In conclusion, integrating pretraining and replay-based continual learning methods presents a promising research direction for enhancing large-scale test case prioritization in CI. Future research should explore different strategies to maximize the benefits of continual learning in test case prioritization.},
  keywords={Continuing education;Training;Software testing;Time-frequency analysis;Accuracy;Codes;Computational modeling;continual learning;test case prioritization;pretraining;experience replay;catastrophic forgetting},
  doi={10.1109/ICSTW60967.2024.00031},
  ISSN={2159-4848},
  month={May},}@INPROCEEDINGS{7339162,
  author={Wang, Yiting and Zhao, Xiaomin and Ding, Xiaoming},
  booktitle={2015 6th IEEE International Conference on Software Engineering and Service Science (ICSESS)}, 
  title={An effective test case prioritization method based on fault severity}, 
  year={2015},
  volume={},
  number={},
  pages={737-741},
  abstract={In regression testing area, test case prioritization is one of the main techniques to improve the test validity and test effectiveness. However, when the test cases have the same maximum coverage rate, the random selection of the additional statement will influence the effect of sorting. For dealing with this problem, a new method is proposed to optimize test case prioritization based on fault severity, referred to as additional-statement-on-fault-severity. Facing those same maximum coverage rate, the new technique main consider a factor, fault severity, to sort test cases, it figures out the value of test case based on the algorithm of the new technique and order the sequence from high to low. Experiment results show that the improved technique of test case prioritizaftion can improve the efficiency of regression testing.},
  keywords={Software;Testing;Computers;Fault detection;Sorting;Minimization;Computer aided software engineering;regression testing;random selection;additional statement;test case prioritization;fault severities},
  doi={10.1109/ICSESS.2015.7339162},
  ISSN={2327-0594},
  month={Sep.},}@INPROCEEDINGS{8229925,
  author={Sujata and Purohit, G.N.},
  booktitle={2017 International Conference on Computing, Communication and Automation (ICCCA)}, 
  title={Classification model for test case prioritization techniques}, 
  year={2017},
  volume={},
  number={},
  pages={919-924},
  abstract={Regression Testing is mainly done in software maintenance aiming to assure that the changes made in the software have correctly been implemented and also to achieve the confidence that the modifications have not affected the other parts of the software. It is very costly and expensive technique. There are number of techniques present in literature that focus on achieving various testing objectives early in the process and hence reduces its cost. Despite of that, testers usually prefer only few already known techniques for test case prioritization. The main reason behind is the absence of guidelines for the selection of TCP techniques. Hence, this piece of research introduces a novel approach for classification of TCP techniques using fuzzy logic to support the efficient selection of test case prioritization techniques. This work is an extension of already proposed selection schema for test case prioritization techniques. To perform the validation of proposed approach results are compared with other classification techniques using Weka tool. The analysis clearly shows the effectiveness of proposed approach as compared to others in terms of its accuracy.},
  keywords={Testing;Complexity theory;Fuzzy logic;Software;Fault detection;Automation;Optimization;regression testing;test case prioritization;classification;fuzzy logic},
  doi={10.1109/CCAA.2017.8229925},
  ISSN={},
  month={May},}@INPROCEEDINGS{7207103,
  author={Konsaard, Patipat and Ramingwong, Lachana},
  booktitle={2015 12th International Conference on Electrical Engineering/Electronics, Computer, Telecommunications and Information Technology (ECTI-CON)}, 
  title={Total coverage based regression test case prioritization using genetic algorithm}, 
  year={2015},
  volume={},
  number={},
  pages={1-6},
  abstract={Regression Testing is a test to ensure that a program that was changed is still working. Changes introduced to a software product often come with defects. Additional test cases are, this could reduce the main challenges of regression testing is test case prioritization. Time, effort and budget needed to retest the software. Former studies in test case prioritization confirm the benefits of prioritization techniques. Most prioritization techniques concern with choosing test cases based on their ability to cover more faults. Other techniques aim to maximize code coverage. Thus, the test cases selected should secure the total coverage to assure the adequacy of software testing. In this paper, we present an algorithm to prioritize test cases based on total coverage using a modified genetic algorithm. Its performance on the average percentage of condition covered and execution time are compared with five other approaches.},
  keywords={Genetic algorithms;Software;Software testing;Sociology;Statistics;Fault detection;Test case prioritization;Test suite;Regression testing;Genetic algorith;Code coverage;APCC;Software Testing;Software engineering},
  doi={10.1109/ECTICon.2015.7207103},
  ISSN={},
  month={June},}@INPROCEEDINGS{9978198,
  author={d’Aragona, Dario Amoroso and Pecorelli, Fabiano and Romano, Simone and Scanniello, Giuseppe and Baldassarre, Maria Teresa and Janes, Andrea and Lenarduzzi, Valentina},
  booktitle={2022 IEEE International Conference on Software Maintenance and Evolution (ICSME)}, 
  title={CATTO: Just-in-time Test Case Selection and Execution}, 
  year={2022},
  volume={},
  number={},
  pages={459-463},
  abstract={Regression testing wants to prevent that errors, which have already been corrected once, creep back into a system that has been updated. A naïve approach consists of re-running the entire test suite (TS) against the changed version of the software under test (SUT). However, this might result in a time-and resource-consuming process; e.g., when dealing with large and/or complex SUTs and TSs. To avoid this problem, Test Case Selection (TCS) approaches can be used. This kind of approaches build a temporary TS comprising only those test cases (TCs) that are relevant to the changes made to the SUT, so avoiding executing unnecessary TCs. In this paper, we introduce CATTO (Commit Adaptive Tool for Test suite Optimization), a tool implementing a TCS strategy for SUTs written in Java as well as a wrapper to allow developers to use CATTO within IntelliJ IDEA and to execute CATTO just-in-time before committing changes to the repository. We conducted a preliminary evaluation of CATTO on seven open-source Java projects to evaluate the reduction of the test-suite size, the loss of fault-revealing TCs, and the loss of fault-detection capability. The results suggest that CATTO can be of help to developers when performing TCS. The video demo and the documentation of the tool is available at: https://catto-tool.github.io/},
  keywords={Java;Software maintenance;Creep;Documentation;Optimization;Testing;Software testing;test case selection;regression testing},
  doi={10.1109/ICSME55016.2022.00059},
  ISSN={2576-3148},
  month={Oct},}@INPROCEEDINGS{9159097,
  author={Joo, Jeonghyun and Yoo, Seunghoon and Park, Myunghwan},
  booktitle={2020 IEEE 13th International Conference on Software Testing, Validation and Verification (ICST)}, 
  title={Poster: Test Case Prioritization Using Error Propagation Probability}, 
  year={2020},
  volume={},
  number={},
  pages={398-401},
  abstract={A software test is to execute the program using a test case to examine whether it produces the intended output. For successful regression testing, it is very important to choose a relatively small amount, but productive test cases to maximize testing efficiency. Test case prioritization is a suggested technique for this purpose. This technique arranges the test cases in such a way that higher-order test cases are expected to outperform those on lower-order test cases in fault-finding capability. In this paper, we suggest a new metric for test case prioritization based on the error propagation probability of the test cases. This metric arranges test cases in order by means of the probabilistic fault finding capability of the test cases. Since our metric is based on mathematical probability, it can show statistically consistent and constant results for the fault-finding capability of test cases. The experiment results show that there is a high correlation between the test cases aligned by our metric and their fault-finding capabilities.},
  keywords={Measurement;Software;Error probability;Testing;Manganese;Correlation;Test Case Prioritization;Error Propagation Probability;Lustre Language;Regression Testing},
  doi={10.1109/ICST46399.2020.00047},
  ISSN={2159-4848},
  month={Oct},}@INPROCEEDINGS{7515934,
  author={Ma, Tingting and Zeng, Hongwei and Wang, Xiaolin},
  booktitle={2016 17th IEEE/ACIS International Conference on Software Engineering, Artificial Intelligence, Networking and Parallel/Distributed Computing (SNPD)}, 
  title={Test case prioritization based on requirement correlations}, 
  year={2016},
  volume={},
  number={},
  pages={419-424},
  abstract={Test case prioritization technique aims to improve test efficiency rate by sorting test cases according to some specific criteria. Requirements play an important role throughout software testing. This paper proposes a test case prioritization method based on requirement correlations. Prioritization of requirements is defined by the users and the developers. This technique focuses on requirements with detected faults after the last regression testing. By readjusting prioritization of fault-related requirements, it can optimize the order of test cases. Experimental results show that this technique exactly contributes to achieving high testing efficiency.},
  keywords={Software;Correlation;Software testing;Heuristic algorithms;Complexity theory;Cognition;Test case prioritization;Requirement correlations;Fault detection rate;Regression Testing},
  doi={10.1109/SNPD.2016.7515934},
  ISSN={},
  month={May},}@INPROCEEDINGS{6888744,
  author={Wang, Xiaolin and Zeng, Hongwei},
  booktitle={15th IEEE/ACIS International Conference on Software Engineering, Artificial Intelligence, Networking and Parallel/Distributed Computing (SNPD)}, 
  title={Dynamic test case prioritization based on multi-objective}, 
  year={2014},
  volume={},
  number={},
  pages={1-6},
  abstract={Test case prioritization technology is to sort the test cases before the software testing designed to improve test efficiency. This paper presents a dynamic test case prioritization technique based on multi-objective. It integrates several traditional single-objective technologies so that makes it more flexible. This technology, from five dimensions, calculates prioritization values of test cases separately. Then a weighted sum is made to the values and it sorts the test cases according to the values. The results return to the storage in order to dynamically adjust the sort of test cases. This technology not only meets the high demands of regression testing, but also ensures the high efficiency of the test results.},
  keywords={History;Testing;Software;Fault detection;Databases;Measurement;Probability;Test case prioritization;Multi-objective;Dynamic;Regression testing},
  doi={10.1109/SNPD.2014.6888744},
  ISSN={},
  month={June},}@INPROCEEDINGS{10556478,
  author={Torbunova, Alina and Strandberg, Per Erik and Porres, Ivan},
  booktitle={2024 IEEE/ACM International Conference on Automation of Software Test (AST)}, 
  title={Dynamic Test Case Prioritization in Industrial Test Result Datasets}, 
  year={2024},
  volume={},
  number={},
  pages={154-158},
  abstract={Regression testing in software development checks if new software features affect existing ones. Regression testing is a key task in continuous development and integration, where software is built in small increments and new features are integrated as soon as possible. It is therefore important that developers are notified about possible faults quickly. In this article, we propose a test case prioritization schema that combines the use of a static and a dynamic prioritization algorithm. The dynamic prioritization algorithm rearranges the order of execution of tests on the fly, while the tests are being executed. We propose to use a conditional probability dynamic algorithm for this. We evaluate our solution on three industrial datasets and utilize Average Percentage of Fault Detection for that. The main findings are that our dynamic prioritization algorithm can: a) be applied with any static algorithm that assigns a priority score to each test case b) can improve the performance of the static algorithm if there are failure correlations between test cases c) can also reduce the performance of the static algorithm, but only when the static scheduling is performed at a near optimal level.},
  keywords={Job shop scheduling;Correlation;Heuristic algorithms;Fault detection;Software algorithms;Dynamic scheduling;Software;regression testing;Test Case Prioritization (TCP);dynamic prioritization},
  doi={},
  ISSN={2833-9061},
  month={April},}@INPROCEEDINGS{7899091,
  author={Zhou, Jianyi and Hao, Dan},
  booktitle={2017 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)}, 
  title={Impact of Static and Dynamic Coverage on Test-Case Prioritization: An Empirical Study}, 
  year={2017},
  volume={},
  number={},
  pages={392-394},
  abstract={Most of existing research in Test-Case Prioritization uses coverage information as the input during the process of prioritization and these coverage can be classified into two categories: static coverage and dynamic coverage. As these coverage information are collected in different ways, they have different influence on test-case prioritization. In this work, we present the first empirical study comparing the impact of static coverage and dynamic coverage with five typical techniques at different test-case granularities (e.g., test-method and test-class level) and different coverage criteria (e.g., method and statement coverage). This study is performed on 15 real-world Java projects (using 163 versions) and we find that the dynamic coverage performs better than static coverage in terms of the results of test-case prioritization.},
  keywords={Software;Software engineering;Conferences;Software testing;Java;Performance analysis;Test Case Prioritization;Empirical Study;Coverage Information;Regression Testing},
  doi={10.1109/ICSTW.2017.74},
  ISSN={},
  month={March},}@INPROCEEDINGS{7913140,
  author={Sharma, Sonia and Singh, Ajmer},
  booktitle={2016 Fourth International Conference on Parallel, Distributed and Grid Computing (PDGC)}, 
  title={Model-based test case prioritization using ACO: A review}, 
  year={2016},
  volume={},
  number={},
  pages={177-181},
  abstract={Regression testing is very costly and inevitable activity of maintenance that is performed to ensure whether the modified software is valid or not. Running all the test cases of a test suit within given limited time and cost constraints is not possible. So, to cover the maximum number of faults in comparatively less time, it is necessary to prioritize the test cases. To solve the time constraint test case prioritization problems Ant Colony optimization (ACO) is a better approach. This paper presents a review on test case prioritization from a given test suite using ACO.},
  keywords={Decision support systems;Testing;Time factors;Ant colony optimization;Maintenance engineering;Software;Regression testing;Ant Colony Optimization;Test case Prioritization},
  doi={10.1109/PDGC.2016.7913140},
  ISSN={},
  month={Dec},}@INPROCEEDINGS{7100468,
  author={Kumar, Harish and Chauhan, Naresh},
  booktitle={2015 2nd International Conference on Computing for Sustainable Global Development (INDIACom)}, 
  title={A coupling effect based test case prioritization technique}, 
  year={2015},
  volume={},
  number={},
  pages={1341-1345},
  abstract={Regression testing is a process that executes subset of tests that have already been conducted to ensure that changes have not propagated unintended side effects. Test case prioritization aims at reordering the regression test suit based on certain criteria, so that the test cases with higher priority can be executed first rather than those with lower priority. In this paper, a new approach for test case prioritization has been proposed which is based on a module-coupling effect that considers the module-coupling value for the purpose of prioritizing the modules in the software so that critical modules can be identified which in turn will find the prioritized set of test cases. In this way there will be high percentage of detecting critical errors that have been propagated to other modules due to any change in a module. The proposed approach has been evaluated with the case study of software consisting of ten modules.},
  keywords={Couplings;Testing;Software;Fault detection;Symmetric matrices;Computer science;Computer bugs;Regression Testing;Test Case Prioritization;Coupling & Cohesion},
  doi={},
  ISSN={},
  month={March},}@ARTICLE{9801672,
  author={Yaraghi, Ahmadreza Saboor and Bagherzadeh, Mojtaba and Kahani, Nafiseh and Briand, Lionel C.},
  journal={IEEE Transactions on Software Engineering}, 
  title={Scalable and Accurate Test Case Prioritization in Continuous Integration Contexts}, 
  year={2023},
  volume={49},
  number={4},
  pages={1615-1639},
  abstract={Continuous Integration (CI) requires efficient regression testing to ensure software quality without significantly delaying its CI builds. This warrants the need for techniques to reduce regression testing time, such as Test Case Prioritization (TCP) techniques that prioritize the execution of test cases to detect faults as early as possible. Many recent TCP studies employ various Machine Learning (ML) techniques to deal with the dynamic and complex nature of CI. However, most of them use a limited number of features for training ML models and evaluate the models on subjects for which the application of TCP makes little practical sense, due to their small regression testing time and low number of failed builds. In this work, we first define, at a conceptual level, a data model that captures data sources and their relations in a typical CI environment. Second, based on this data model, we define a comprehensive set of features that covers all features previously used by related studies. Third, we develop methods and tools to collect the defined features for 25 open-source software systems with enough failed builds and whose regression testing takes at least five minutes. Fourth, relying on the collected dataset containing a comprehensive feature set, we answer four research questions concerning data collection time, the effectiveness of ML-based TCP, the impact of the features on effectiveness, the decay of ML-based TCP models over time, and the trade-off between data collection time and the effectiveness of ML-based TCP techniques.},
  keywords={Feature extraction;Codes;Testing;History;Training;Data collection;Computational modeling;Machine learning;software testing;test case prioritization;test case selection;continuous integration},
  doi={10.1109/TSE.2022.3184842},
  ISSN={1939-3520},
  month={April},}@INPROCEEDINGS{9240666,
  author={Vescan, Andreea and Şerban, Camelia},
  booktitle={2020 IEEE International Conference on Software Maintenance and Evolution (ICSME)}, 
  title={Towards a new Test Case Prioritization Approach based on Fuzzy Clustering Analysis}, 
  year={2020},
  volume={},
  number={},
  pages={786-788},
  abstract={Regression testing is used every time a change is taking place in the source code, various approaching for the test cases to be executed focusing on different criteria: from the maximization of faults and/or code coverage to minimization of time execution. Test Case Prioritization is one of such approaches that aim to optimize the execution order of test cases according to various criteria. However, many regression testing approaches use only code coverage criteria, few considered requirements. This paper aims to propose a fuzzy clustering approach with various metrics of the considered test cases, considering several aspects: faults, execution time, requirements covered by the test cases, and requirements dependencies. An in-depth analysis will follow to determine what are the best metrics to be used in the TCP. This will have a positive impact on the research community by identifying new perspectives to be considered for the TCP.},
  keywords={Measurement;Software maintenance;Software algorithms;Focusing;Prediction algorithms;Minimization;Testing;Test Case Prioritization;Regression Testing;Defect Prediction;Average Percentage of Faults Detected (APFD)},
  doi={10.1109/ICSME46990.2020.00091},
  ISSN={2576-3148},
  month={Sep.},}@INPROCEEDINGS{7506447,
  author={Chaurasia, Geetanjali and Agarwal, Sonali and Gautam, Swarnima Singh},
  booktitle={2015 IEEE Students Conference on Engineering and Systems (SCES)}, 
  title={Clustering based novel test case prioritization technique}, 
  year={2015},
  volume={},
  number={},
  pages={1-5},
  abstract={Regression testing is an activity during the maintenance phase to validate the changes made to the software and to ensure that these changes would not affect the previously verified code or functionality. Often, regression testing is performed with limited computing resources and time budget. So in this phase, it is infeasible to run the complete test suite Thus, test-case prioritization approaches are applied to ensure the execution of test cases in some prioritized order and to achieve some specific goals like, increasing the rate of bug detection, identifying the most critical bugs as early as possible etc. In this research work, we are going to propose a new and more effective clustering based prioritization technique that uses various metrics and execution time of test cases to reorder them. The results of implementation will prove that the suggested approach is more productive than the existing coverage and clustering based prioritization techniques.},
  keywords={Measurement;Complexity theory;Fault detection;Testing;Information technology;History;Clustering algorithms;Clustering;Regression testing;test case prioritization;test suite},
  doi={10.1109/SCES.2015.7506447},
  ISSN={},
  month={Nov},}@INPROCEEDINGS{6601820,
  author={Lin, Chu-Ti and Chen, Cheng-Ding and Tsai, Chang-Shi and Kapfhammer, Gregory M.},
  booktitle={2013 18th International Conference on Engineering of Complex Computer Systems}, 
  title={History-Based Test Case Prioritization with Software Version Awareness}, 
  year={2013},
  volume={},
  number={},
  pages={171-172},
  abstract={Test case prioritization techniques schedule the test cases in an order based on some specific criteria so that the tests with better fault detection capability are executed at an early position in the regression test suite. Many existing test case prioritization approaches are code-based, in which the testing of each software version is considered as an independent process. Actually, the test results of the preceding software versions may be useful for scheduling the test cases of the later software versions. Some researchers have proposed history-based approaches to address this issue, but they assumed that the immediately preceding test result provides the same reference value for prioritizing the test cases of the successive software version across the entire lifetime of the software development process. Thus, this paper describes ongoing research that studies whether the reference value of the immediately preceding test results is version-aware and proposes a test case prioritization approach based on our observations. The experimental results indicate that, in comparison to existing approaches, the presented one can schedule test cases more effectively.},
  keywords={Software;Testing;Fault detection;Schedules;Software engineering;Computers;Educational institutions;Regression Testing;Test Case Prioritization},
  doi={10.1109/ICECCS.2013.33},
  ISSN={},
  month={July},}@INPROCEEDINGS{9609187,
  author={Sharif, Aizaz and Marijan, Dusica and Liaaen, Marius},
  booktitle={2021 IEEE International Conference on Software Maintenance and Evolution (ICSME)}, 
  title={DeepOrder: Deep Learning for Test Case Prioritization in Continuous Integration Testing}, 
  year={2021},
  volume={},
  number={},
  pages={525-534},
  abstract={Continuous integration testing is an important step in the modern software engineering life cycle. Test prioritization is a method that can improve the efficiency of continuous integration testing by selecting test cases that can detect faults in the early stage of each cycle. As continuous integration testing produces voluminous test execution data, test history is a commonly used artifact in test prioritization. However, existing test prioritization techniques for continuous integration either cannot handle large test history or are optimized for using a limited number of historical test cycles. We show that such a limitation can decrease fault detection effectiveness of prioritized test suites. This work introduces DeepOrder, a deep learning-based model that works on the basis of regression machine learning. DeepOrder ranks test cases based on the historical record of test executions from any number of previous test cycles. DeepOrder learns failed test cases based on multiple factors including the duration and execution status of test cases. We experimentally show that deep neural networks, as a simple regression model, can be efficiently used for test case prioritization in continuous integration testing. DeepOrder is evaluated with respect to time-effectiveness and fault detection effectiveness in comparison with an industry practice and the state of the art approaches. The results show that DeepOrder outperforms the industry practice and state-of-the-art test prioritization approaches in terms of these two metrics.},
  keywords={Industries;Deep learning;Measurement;Software maintenance;Fault detection;Conferences;History;Regression testing;Test case prioritization;Test case selection;Deep Learning;Machine Learning;Continuous Integration},
  doi={10.1109/ICSME52107.2021.00053},
  ISSN={2576-3148},
  month={Sep.},}@INPROCEEDINGS{7019794,
  author={Vedpal and Chauhan, Naresh and Kumar, Harish},
  booktitle={2014 International Conference on Contemporary Computing and Informatics (IC3I)}, 
  title={A hierarchical test case prioritization technique for object oriented software}, 
  year={2014},
  volume={},
  number={},
  pages={249-254},
  abstract={Software reuse is the use of existing artifacts to create new software. Inheritance is the foremost technique of reuse. But the inherent complexity due to inheritance hierarchy found in object - oriented paradigm also affect testing. Every time any change occurs in the software, new test cases are added in addition to the existing test suite. So there is need to conduct effective regression testing having less number of test cases to reduce cost and time. In this paper a hierarchical test case prioritization technique is proposed wherein various factors have been considered that affect error propagation in the inheritance. In this paper prioritization of test cases take place at two levels. In the first level the classes are prioritized and in the second level the test cases of prioritized classes are ordered. To show the effectiveness of proposed technique it was applied and analyze on a C++ program.},
  keywords={Testing;Software;Fault detection;Measurement;Unified modeling language;Informatics;Object oriented modeling;object oriented testing;test case prioritization;regression testing},
  doi={10.1109/IC3I.2014.7019794},
  ISSN={},
  month={Nov},}@INPROCEEDINGS{7155012,
  author={Nagar, Reetika and Kumar, Arvind and Singh, Gaurav Pratap and Kumar, Sachin},
  booktitle={2015 International Conference on Futuristic Trends on Computational Analysis and Knowledge Management (ABLAZE)}, 
  title={Test case selection and prioritization using cuckoos search algorithm}, 
  year={2015},
  volume={},
  number={},
  pages={283-288},
  abstract={Regression Testing is an inevitable and very costly activity that is implemented to ensure the validity of new version of software in a time and resource constrained environment. Execution of entire test suite is not possible so it is necessary to apply techniques like Test Case Selection and Test Case Prioritization for proper selection and schedule of test cases in a specific sequence, fulfilling some chosen criteria. Cuckoo search (CS) algorithm is an optimization algorithm proposed by Yang and Deb [13]. It is inspired by the obligate brood parasitism of some cuckoo species by laying their eggs in the nests of other host birds. Cuckoo Search is very easy to implement as it depends on single parameter only unlike other optimization algorithms. In this paper a test case selection and prioritization algorithm has been proposed using Cuckoo Search. This algorithm selects and prioritizes the test cases based on the number of faults covered in minimum time. The proposed algorithm is an optimistic approach which provides optimum best results in minimum time.},
  keywords={Testing;Algorithm design and analysis;Optimization;Software algorithms;Software;Sociology;Statistics;Cuckoos Search;Levy Flight;Regression Test Selection;Test Case Prioritization;Artificial Intelligence},
  doi={10.1109/ABLAZE.2015.7155012},
  ISSN={},
  month={Feb},}@INPROCEEDINGS{9712155,
  author={Lin, Chu-Ti and Yuan, Sheng-Hsiang and Intasara, Jutarporn},
  booktitle={2021 28th Asia-Pacific Software Engineering Conference (APSEC)}, 
  title={A Learning-to-Rank Based Approach for Improving Regression Test Case Prioritization}, 
  year={2021},
  volume={},
  number={},
  pages={576-577},
  abstract={Many prior studies with attempt to improve regression testing adopt test case prioritization (TCP). TCP generally arranges the execution of regression test cases according to specific rules with the goal of revealing faults as early as possible. It is noted that different TCP algorithms adopt different metrics to evaluate test cases' priority so that they may be effect at revealing faults early in different faulty programs. Adopting a single metric may not generally work well. In this decade, learning-to-rank (LTR) strategies have been adopted to address some software engineering problems. This study also uses a pairwise LTR strategy XGBoost to combine several existing metrics so as to improve TCP effectiveness. More specifically, we regard the metrics adopted by TCP techniques to evaluate test cases' priority as the features of the training data and adopt XGBoost to learn the weights of the combined metrics. Additionally, in order to avoid overfitting, we use a fuzzy inference system to generate additional features for data augmentation. The experimental results show that our approach achieves more excellent effectiveness than the existing TCP techniques with respect to the selected subject programs.},
  keywords={Measurement;Fuzzy logic;Software algorithms;Training data;Software engineering;Testing;regression testing;test case prioritization;machine learning;learning-to-rank;fuzzy inference system},
  doi={10.1109/APSEC53868.2021.00075},
  ISSN={2640-0715},
  month={Dec},}@INPROCEEDINGS{7380585,
  author={Dhareula, Priyanka and Ganpati, Anita},
  booktitle={2015 International Conference on Green Computing and Internet of Things (ICGCIoT)}, 
  title={Prevalent criteria's in regression test case selection techniques: An exploratory study}, 
  year={2015},
  volume={},
  number={},
  pages={871-876},
  abstract={Regression testing is done after needful changes, ensuring that changes are working as required and does not produce unexpected results for a system under test. Note worthy difficulty in regression testing is selection of significant subgroup of test cases. This paper has analyzed techniques of regression test selection (RTS) for test case optimization in various domains. The study identified most prevalent criteria's used by various researchers. This study analyzed two broad groups of techniques under which test cases are optimized i.e. code-based and requirement-based techniques. Further most prevalent criteria's were identified and techniques were grouped under them. The study is also focused on the level of test granularity used by different researchers. Two main granularity levels were identified for code based testing i.e. fine granularity and coarse granularity. From this study it is also concluded that no such technique could be generalized because they are proposed for different domains of interest.},
  keywords={Testing;Software;Unified modeling language;Optimization;Fault diagnosis;Flow graphs;Databases;Regression testing;maintenance;test case selection;selection techniques},
  doi={10.1109/ICGCIoT.2015.7380585},
  ISSN={},
  month={Oct},}@INPROCEEDINGS{6949377,
  author={Nagar, Reetika and Kumar, Arvind and Kumar, Sachin and Baghel, Anurag Singh},
  booktitle={2014 5th International Conference - Confluence The Next Generation Information Technology Summit (Confluence)}, 
  title={Implementing test case selection and reduction techniques using meta-heuristics}, 
  year={2014},
  volume={},
  number={},
  pages={837-842},
  abstract={Regression Testing is an inevitable and very costly maintenance activity that is implemented to make sure the validity of modified software in a time and resource constrained environment. Execution of entire test suite is not possible so it is necessary to apply techniques like Test Case Selection and Test Case Prioritization to select and prioritize a minimum set of test cases, fulfilling some chosen criteria, that is, covering all possible faults in minimum time and other. In this paper a test case reduction hybrid Particle Swarm Optimization (PSO) algorithm has been proposed. This PSO algorithm uses GA mutation operator while processing. PSO is a swarm intelligence algorithm based on particles behavior. GA is an evolutionary algorithm (EA). The proposed algorithm is an optimistic approach which provides optimum best results in minimum time.},
  keywords={Testing;Genetic algorithms;Software algorithms;Software;Particle swarm optimization;Sociology;Statistics;Particle Swarm Optimization;Genetic Algorithm;Regression Test Selection;Test Case Prioritization},
  doi={10.1109/CONFLUENCE.2014.6949377},
  ISSN={},
  month={Sep.},}@INPROCEEDINGS{7975319,
  author={Saraswat, Pavi and Singhal, Abhishek},
  booktitle={2016 1st India International Conference on Information Processing (IICIP)}, 
  title={A hybrid approach for test case prioritization and optimization using meta-heuristics techniques}, 
  year={2016},
  volume={},
  number={},
  pages={1-6},
  abstract={Software testing is a very crucial and important phase for (SDLC) software development life cycle. Software is being tested on its effectiveness for generating good quality software. Regression testing is done by considering the constraints of resources and in this phase optimization of test suite is very important and crucial. This paper mainly aims to make use of hybrid approach of meta-heuristics, It comprises of two algorithms first is genetic algorithm and second is particle swarm optimization. In addition to algorithm the comparison of proposed algorithm hybrid GA_PSO with other optimization algorithms are been done. To validate the research Average Percentage Fault Detection (APFD) metric is used for comparison and fitness evaluation of the proposed algorithm.},
  keywords={Genetic algorithms;Testing;Sociology;Statistics;Fault detection;Software;Optimization;Software testing;regression testing;test case prioritization;test case optimization;genetic algorithm;partucle swarm optimization},
  doi={10.1109/IICIP.2016.7975319},
  ISSN={},
  month={Aug},}@INPROCEEDINGS{9200083,
  author={Chaudhary, Sarika and Jatain, Aman},
  booktitle={2020 International Conference on Computational Performance Evaluation (ComPE)}, 
  title={Performance Evaluation of Clustering Techniques in Test Case Prioritization}, 
  year={2020},
  volume={},
  number={},
  pages={699-703},
  abstract={Regression testing plays a crucial role in maintaining quality of a software, yet accounts for a huge percentage of cost from overall development cost. Selection of regression testing technique directly impacts the software quality, where at first step relevant test cases are selected, then redundant test case are removed during minimization step and at final step test cases are prioritized to execute the most relevant test cases first and so on. The test case prioritization is one of the broadly used approach to reduce cost and time of regression testing. In literature researchers have proposed various methods to prioritize test cases, and clustering is one of the popular and suggested techniques among them. It is an unsupervised method of putting similar data into one cluster and dissimilar data into different cluster and considered to be an important tool for exploratory data analysis. This paper analyses various clustering techniques used for test case prioritization and presents a performance analysis on different hard clustering algorithm and then the test case prioritization techniques are also evaluated using APFD.},
  keywords={Clustering algorithms;Classification algorithms;Fault detection;Testing;Schedules;Software;Software algorithms;APFD;clustering;DBSCAN;DBK-mean;K-mean;test case prioritization},
  doi={10.1109/ComPE49325.2020.9200083},
  ISSN={},
  month={July},}@INPROCEEDINGS{6986033,
  author={Nejad Dobuneh, Mojtaba Raeisi and Jawawi, Dayang N. A. and Ghazali, Masitah and Malakooti, Mohammad V.},
  booktitle={2014 8th. Malaysian Software Engineering Conference (MySEC)}, 
  title={Development test case prioritization technique in regression testing based on hybrid criteria}, 
  year={2014},
  volume={},
  number={},
  pages={301-305},
  abstract={Test case prioritization techniques improve the performance of regression testing, and arrange test cases in order to obtain maximum available fault that is going to be detected in a shorter time. In this research the priority is given to test cases that are performed based on multiple criteria and hybrid criteria to enhance the effectiveness of time and cost for proposed technique. This paper shows that our prioritization technique is appropriate for regression testing environment and show that our prioritization approach frequently produces a higher average percentage of fault detection rate value, for web application. The experiments also reveal fundamental tradeoffs in the performance of time aware prioritization. In this technique some fault will be seeded in subject application, then applying the prioritization criteria on test cases to obtain the effective time of average percentage fault detection rate.},
  keywords={Fault detection;Software;Software engineering;Schedules;Organizations;Software testing;web application;regression testing;prioritization criteria},
  doi={10.1109/MySec.2014.6986033},
  ISSN={},
  month={Sep.},}@ARTICLE{8920054,
  author={Ji, Shunhui and Li, Bixin and Zhang, Pengcheng},
  journal={IEEE Access}, 
  title={Test Case Selection for All-Uses Criterion-Based Regression Testing of Composite Service}, 
  year={2019},
  volume={7},
  number={},
  pages={174438-174464},
  abstract={Composite services evolve for various reasons. Test case selection in the regression testing is an effective technique to ensure the correctness of modified versions meanwhile to reduce the cost of testing. However, few work has studied the test case selection problem based on the data flow testing criteria. In addition, there are three observable kinds of changes during the evolution, including Process change, Binding change and Interface change, which all bring impact to the data flow. To address these issues, a test case selection approach is proposed for regression testing of BPEL (Business Process Execution Language) composite service where all-uses criterion is satisfied and all the three change types are involved. BPEL composite service is modeled with a two-level model in which XCFG (eXtended Control Flow Graph) describes the behavior of BPEL process in the first level and WSDM (Web Service Description Model) depicts the interface information of composite service and partner services in the second level. Change impact analysis is performed to identify the affected definition-use pairs by comparing and analyzing two-level models of the baseline and evolved versions. And testing paths are generated to cover the affected definition-use pairs and select test cases based on the path condition analysis. Empirical result shows that the proposed approach is effective.},
  keywords={Testing;Payloads;Web services;Flow graphs;Process control;Regression testing;data flow testing;composite service;test case selection},
  doi={10.1109/ACCESS.2019.2957220},
  ISSN={2169-3536},
  month={},}@ARTICLE{10614590,
  author={Ghani, Israr and Wan Kadir, Wan Mohd Nasir and Arbain, Adila Firdaus and Ghani, Imran},
  journal={IEEE Access}, 
  title={A Detection-Based Multi-Objective Test Case Selection Algorithm to Improve Time and Efficiency in Regression Testing}, 
  year={2024},
  volume={12},
  number={},
  pages={114974-114994},
  abstract={Regression testing is carried out to ensure that changes or enhancements are not impacting previous working software. Deciding how much retesting is required after modifications, bug fixes or before product deployments are difficult. Therefore, Test Case Selection (TCS) select the satisfactory subset of modified test cases from already executed test suites. The testing primary concerns in TCS for regression testing are efficiency (i.e., coverage, fault detection ability, redundancy) and time. The first challenge in TCS concerns the efficiency of multi-objective test case selection. The second challenge is to improve the execution time to detect the changes in a test suite, which makes it impractical to use these efficiency measures as a single goal for TCS. To overcome these challenges, there is a need to introduce an efficient detection-based multi-objective framework to improve the Time and efficiency of TCS. A multi-objective advanced and efficient regression test case selection (ARTeCS) framework is devised to improve the time performance and efficiency of a given TCS objective relative to the other TCS approaches. An algorithm to detect the changes in test cases using multiple TCS objectives. This comparison found that the enhanced ARTeCS algorithm improves redundancy efficiency by 44.02%. The selection technique showed ARTeCS improved the modified change detection by 43.00%, whereas the Hybrid Whale Optimization Algorithm (HWOA) stated 23% and ACO showed 33% only for selected test cases. Regarding average for fault detection, ACO scores 21%, HWOA scores 11%, and ARTeCS scores 31.08% with total execution times of 12, 21 and 09 seconds, respectively. In conclusion, the multiple-objective ARTeCS framework with four test suite selection parameters is more efficient than the existing multi-objective selection framework.},
  keywords={Redundancy;Software algorithms;Software testing;Fault detection;Codes;History;Regression analysis;Software testing;regression testing;test case selection;TCS algorithm;TCS framework;multi-objective approach in TCS},
  doi={10.1109/ACCESS.2024.3435678},
  ISSN={2169-3536},
  month={},}@ARTICLE{6936894,
  author={Panichella, Annibale and Oliveto, Rocco and Penta, Massimiliano Di and De Lucia, Andrea},
  journal={IEEE Transactions on Software Engineering}, 
  title={Improving Multi-Objective Test Case Selection by Injecting Diversity in Genetic Algorithms}, 
  year={2015},
  volume={41},
  number={4},
  pages={358-383},
  abstract={A way to reduce the cost of regression testing consists of selecting or prioritizing subsets of test cases from a test suite according to some criteria. Besides greedy algorithms, cost cognizant additional greedy algorithms, multi-objective optimization algorithms, and multi-objective genetic algorithms (MOGAs), have also been proposed to tackle this problem. However, previous studies have shown that there is no clear winner between greedy and MOGAs, and that their combination does not necessarily produce better results. In this paper we show that the optimality of MOGAs can be significantly improved by diversifying the solutions (sub-sets of the test suite) generated during the search process. Specifically, we introduce a new MOGA, coined as DIversity based Genetic Algorithm (DIV-GA), based on the mechanisms of orthogonal design and orthogonal evolution that increase diversity by injecting new orthogonal individuals during the search process. Results of an empirical study conducted on eleven programs show that DIV-GA outperforms both greedy algorithms and the traditional MOGAs from the optimality point of view. Moreover, the solutions (sub-sets of the test suite) provided by DIV-GA are able to detect more faults than the other algorithms, while keeping the same test execution cost.},
  keywords={Optimization;Greedy algorithms;Testing;Linear programming;Genetic algorithms;Genetics;Sociology;Test Case Selection;Regression Testing;Orthogonal Design;Singular Value Decomposition;Genetic Algorithms;Empirical Studies;Test case selection;regression testing;orthogonal design;singular value decomposition;genetic algorithms;empirical studies},
  doi={10.1109/TSE.2014.2364175},
  ISSN={1939-3520},
  month={April},}@INPROCEEDINGS{7809434,
  author={Wang, Xiaolin and Zeng, Hongwei},
  booktitle={2016 IEEE/ACM International Workshop on Continuous Software Evolution and Delivery (CSED)}, 
  title={History-Based Dynamic Test Case Prioritization for Requirement Properties in Regression Testing}, 
  year={2016},
  volume={},
  number={},
  pages={41-47},
  abstract={Regression testing is an important but extremely costly and time-consuming process. Because of limited resources in practice, test case prioritization focuses on the improvement of testing efficiency. However, traditional test case prioritization techniques emphasize only one-time testing without considering huge historical data generated in regression testing. This paper proposes an approach to prioritizing test cases based on historical data. Requirements are a significant factor in the testing process, the priorities of test cases are initialized based on requirement priorities in our history-based approach, and then are calculated dynamically according to historical data in regression testing. To evaluate our approach, an empirical study on an industrial system is conducted. Experimental results show an improved performance for our proposed method using measurements of Average Percentage of Faults Detected and Fault Detection Rate.},
  keywords={Software;History;Fault detection;Complexity theory;Software testing;Time factors;Test Case Prioritization; Requirement Property; History Data; Regression Testing},
  doi={10.1145/2896941.2896949},
  ISSN={},
  month={May},}@INPROCEEDINGS{7475187,
  author={Tumeng, Rooster and Jawawi, Dayang Norhayati Abang and Isa, Mohd Adham},
  booktitle={2015 9th Malaysian Software Engineering Conference (MySEC)}, 
  title={Test case prioritization with textual comparison metrics}, 
  year={2015},
  volume={},
  number={},
  pages={7-12},
  abstract={Regression testing of a large test pool consistently needs a prioritization technique that caters requirements changes. Conventional prioritization techniques cover only the methods to find the ideal ordering of test cases neglecting requirement changes. In this paper, we propose string dissimilarity-based priority assignment to test cases through the combination of classical and non-classical textual comparison metrics and elaborate a prioritization algorithm considering requirement changes. The proposed technique is suitable to be used as a preliminary testing when the information of the entire program is not in possession. We performed evaluation on random permutations and three textual comparison metrics and concluded the findings of the experiment.},
  keywords={Measurement;Testing;Silicon;Software;Context;Software engineering;Programming;textual comparison;test case prioritization;regression testing},
  doi={10.1109/MySEC.2015.7475187},
  ISSN={},
  month={Dec},}@INPROCEEDINGS{8991645,
  author={Ali, Sadia and Hafeez, Yaser},
  booktitle={2019 International Conference on Frontiers of Information Technology (FIT)}, 
  title={Enabling Test Case Prioritization For Component Based Software Development}, 
  year={2019},
  volume={},
  number={},
  pages={105-1054},
  abstract={Frequent evolution of modern software systems increases complexity and system failure. Therefore, to overcome these issues the component-based system was developed that consists of integrated reuse components that work together to perform specific tasks or new application development. Mostly component based systems use configuration capabilities to adopt the changes and external uncertainties. Quality of these systems can be assessed through customer satisfaction after modification to verify the performance during maintenance activities. Software engineers for high-reliability, overall requirements functionality needs to verify before release of new product. One of the common ways to evaluate system quality in a sequence of releases is regression testing. Software quality engineers use to ensure that no faults introduced after changes. The purpose of this research work to identify the limitations in existing studies that create complexity and increase efforts during testing component based software and eliminate those factors through the proposed approach. The mixed research methodology will be followed in this context comprising qualitative and quantitative methods. To investigate the potential benefits of the proposed approach; will be performed a case study and experiment. Preliminary results indicated that the proposed approach significantly improve faults detection rate after changes alongwith less effort and cost in component based system development.},
  keywords={Component Based Software, Regression Testing, Test Case Prioritization},
  doi={10.1109/FIT47737.2019.00029},
  ISSN={2334-3141},
  month={Dec},}@INPROCEEDINGS{7148505,
  author={Singal, Prerna and Mishra, Anil K and Singh, Latika},
  booktitle={International Conference on Computing, Communication & Automation}, 
  title={Test case selection for regression testing of applications using web services based on WSDL specification changes}, 
  year={2015},
  volume={},
  number={},
  pages={908-913},
  abstract={There is much enthusiasm around web services in today's world. Web Services take the advantage of internet to communicate between two electronic devices connected via a network. Testing a Web Service is a challenge as the Service Requester does not have the source code and somehow needs to fully test the impact of changes on his application. Regression testing verifies the integrity of the application and makes sure that the changes have not introduced new software errors. Our approach involves the parsing of the WSDL XML file to extract information regarding the operation name, input message and output message. Both the original and changed XML files for the web service are parsed to extract their respective information from the port type and message element of WSDL. Then, we generate a hash table form the extracted information for both the original and delta WSDL. We pass the hash tables to a Comparator as input, which then compares the hash tables and generates the operation changes as output. In the last step test cases are selected for regressing testing of the changed web service based upon the changes in operations provided by the comparator.},
  keywords={Web services;Testing;XML;Ports (Computers);Unified modeling language;Data mining;Automation;Web Services;Regression Testing;Hash Table;WSDL},
  doi={10.1109/CCAA.2015.7148505},
  ISSN={},
  month={May},}@INPROCEEDINGS{10174146,
  author={Greca, Renan and Miranda, Breno and Bertolino, Antonia},
  booktitle={2023 IEEE/ACM International Conference on Automation of Software Test (AST)}, 
  title={Orchestration Strategies for Regression Test Suites}, 
  year={2023},
  volume={},
  number={},
  pages={163-167},
  abstract={Regression testing is widely studied in the literature, although most research on the topic is concerned with improving specific sub-challenges of a wider goal. Test suite orchestration proposes a more comprehensive view of the challenge of regression testing, by merging and combining different techniques with a variety of objectives, including prioritizing, selecting, reducing and amplifying tests, detecting flaky tests and potentially more. This paper presents the key approaches and techniques that form test suite orchestration, along with common evaluation metrics, and discusses how they can be used together to ultimately provide an efficient and effective regression testing strategy. To illustrate the benefits of orchestration, we provide some examples of existing papers that take steps towards this goal, even if the specific terminology is not yet used. Orchestrated strategies utilizing existing regression testing techniques provide a pathway to practicality and real-world usage of the academic literature.},
  keywords={Software testing;Measurement;Automation;Terminology;Merging;Software;software testing;regression testing;test case selection;test case prioritization;test suite reduction;test suite amplification;flaky test detection;test suite orchestration},
  doi={10.1109/AST58925.2023.00020},
  ISSN={2833-9061},
  month={May},}@ARTICLE{7314957,
  author={Hao, Dan and Zhang, Lu and Zang, Lei and Wang, Yanbo and Wu, Xingxia and Xie, Tao},
  journal={IEEE Transactions on Software Engineering}, 
  title={To Be Optimal or Not in Test-Case Prioritization}, 
  year={2016},
  volume={42},
  number={5},
  pages={490-505},
  abstract={Software testing aims to assure the quality of software under test. To improve the efficiency of software testing, especially regression testing, test-case prioritization is proposed to schedule the execution order of test cases in software testing. Among various test-case prioritization techniques, the simple additional coverage-based technique, which is a greedy strategy, achieves surprisingly competitive empirical results. To investigate how much difference there is between the order produced by the additional technique and the optimal order in terms of coverage, we conduct a study on various empirical properties of optimal coverage-based test-case prioritization. To enable us to achieve the optimal order in acceptable time for our object programs, we formulate optimal coverage-based test-case prioritization as an integer linear programming (ILP) problem. Then we conduct an empirical study for comparing the optimal technique with the simple additional coverage-based technique. From this empirical study, the optimal technique can only slightly outperform the additional coverage-based technique with no statistically significant difference in terms of coverage, and the latter significantly outperforms the former in terms of either fault detection or execution time. As the optimal technique schedules the execution order of test cases based on their structural coverage rather than detected faults, we further implement the ideal optimal test-case prioritization technique, which schedules the execution order of test cases based on their detected faults. Taking this ideal technique as the upper bound of test-case prioritization, we conduct another empirical study for comparing the optimal technique and the simple additional technique with this ideal technique. From this empirical study, both the optimal technique and the additional technique significantly outperform the ideal technique in terms of coverage, but the latter significantly outperforms the former two techniques in terms of fault detection. Our findings indicate that researchers may need take cautions in pursuing the optimal techniques in test-case prioritization with intermediate goals.},
  keywords={Software;Measurement;Schedules;Fault detection;Integer linear programming;Software testing;Test-Case Prioritization;Integer Linear Programming;Greedy Algorithm;Empirical Study;Test-case prioritization;integer linear programming;greedy algorithm;empirical study},
  doi={10.1109/TSE.2015.2496939},
  ISSN={1939-3520},
  month={May},}@INPROCEEDINGS{7176241,
  author={Akimoto, Shun and Yaegashi, Rihito and Takagi, Tomohiko},
  booktitle={2015 IEEE/ACIS 16th International Conference on Software Engineering, Artificial Intelligence, Networking and Parallel/Distributed Computing (SNPD)}, 
  title={Test case selection technique for regression testing using differential control flow graphs}, 
  year={2015},
  volume={},
  number={},
  pages={1-3},
  abstract={This paper shows a new technique to select effective test cases for regression testing of software. In the technique, an UCN (update complexity number) of each module of software under test is calculated based on a differential control flow graph, and then test cases that execute modules with larger UCNs are selected automatically.},
  keywords={Flow graphs;Software;Complexity theory;Measurement;Software testing;Merging;software testing;regression testing;test case;structured chart;control flow graph},
  doi={10.1109/SNPD.2015.7176241},
  ISSN={},
  month={June},}@INPROCEEDINGS{6571611,
  author={Buchgeher, Georg and Ernstbrunner, Christian and Ramler, Rudolf and Lusser, Michael},
  booktitle={2013 IEEE Sixth International Conference on Software Testing, Verification and Validation Workshops}, 
  title={Towards Tool-Support for Test Case Selection in Manual Regression Testing}, 
  year={2013},
  volume={},
  number={},
  pages={74-79},
  abstract={Manual regression testing can be a time-intensive and costly activity. Required efforts can be reduced by selecting only the tests for re-testing that verify actually modified system parts. However, if testers are not familiar with the system implementation the selection of relevant test cases may become difficult. In this paper we report on our experiences with the development of a tool-based approach supporting the selection of manual regression tests. The presented approach is developed together with the software testing department of an international company. Test cases are selected by analyzing different kinds of information resources, i.e., code coverage information and data provided by versioning systems. Experience shows that code coverage information can assist in selecting candidate test cases for regression testing. However, we also encountered some principal challenges in implementing test case selection in practice: Relying solely on code coverage often leads to a large set of test cases, available versioning systems lack the necessary details to map code changes to relevant structural elements, and collecting and keeping coverage data for manual regressing testing up-to-date involves additional costs and effort.},
  keywords={Testing;Manuals;User interfaces;Software systems;Hardware;Context;regression testing;test suite reduction;test case selection;manual testing},
  doi={10.1109/ICSTW.2013.16},
  ISSN={},
  month={March},}@INPROCEEDINGS{10393597,
  author={Han, Kangwei and Song, Yinglei and Zhang, Yaying},
  booktitle={2023 IEEE 11th International Conference on Information, Communication and Networks (ICICN)}, 
  title={Regression Test Case Selection Based on multi-objective Optimization and Improved Harmonic Search Algorithms}, 
  year={2023},
  volume={},
  number={},
  pages={830-834},
  abstract={Regression testing is a method for catching errors generated during version updates of a product. Retesting all existing test cases is its most reliable strategy, but the resulting testing costs are significant. This paper proposes a regression test case selection method based on multi-objective optimization and an improved harmonic search algorithm. Regression test cases are selected from the set of existing test cases to meet the test adequacy criteria and the coverage of faults, unique coverage and algorithm execution time are used as performance metrics to achieve the optimization criteria. The performance of the proposed approach was evaluated by comparing it with the Particle swarm algorithm. The results of the statistical tests show a more significant improvement compared to existing methods.},
  keywords={Measurement;Costs;Redundancy;Harmonic analysis;Reliability;Particle swarm optimization;Optimization;regression test;test case selection;multi-target search;harmony search},
  doi={10.1109/ICICN59530.2023.10393597},
  ISSN={},
  month={Aug},}@INPROCEEDINGS{10301343,
  author={Yu, Xiaolei and Jia, Kai and Hu, Wenhua and Tian, Jing and Xiang, Jianwen},
  booktitle={2023 IEEE 34th International Symposium on Software Reliability Engineering Workshops (ISSREW)}, 
  title={Black-Box Test Case Prioritization Using Log Analysis and Test Case Diversity}, 
  year={2023},
  volume={},
  number={},
  pages={186-191},
  abstract={Regression testing is a software testing type that examines whether updates made in the software impact the existing functionality of the application. Depressingly, the long testing time and high testing costs make regression testing very expensive. Test case prioritization (TCP) stands out as one of the extensively researched regression testing techniques. It prioritizes test cases to optimize their execution order, aiming to maximize the prioritization goals and reveal faults earlier to provide feedback to testers. The TCP technique based on log analysis (LogTCP) designs the prioritization strategy using logs generated during test case execution. However, LogTCP’s performance is limited by its inability to incorporate the diversity of test cases for sorting. To overcome these concerns, we propose a method to implement TCP using k-means clustering and log analysis(called KL-TCP), that takes into account both log information and test case diversity. We examine the effectiveness of this strategy in ten open source Java projects on GitHub. The experimental results show that our proposed method outperforms LogTCP method by detecting a higher average percentage of faults. The best average performance of the ten project experiments reached 0.77(APFD).},
  keywords={Software testing;Java;Fault detection;Semantics;Feature extraction;Software reliability;History;test case prioritization;test case diversity;log parsing},
  doi={10.1109/ISSREW60843.2023.00072},
  ISSN={},
  month={Oct},}@INPROCEEDINGS{8991616,
  author={Afzal, Tehseen and Nadeem, Aamer and Sindhu, Muddassar and uz Zaman, Qamar},
  booktitle={2019 International Conference on Frontiers of Information Technology (FIT)}, 
  title={Test Case Prioritization Based on Path Complexity}, 
  year={2019},
  volume={},
  number={},
  pages={363-3635},
  abstract={Software undergoes many modifications after its release. Regression testing is performed to ensure that the modification has not introduced any errors in the software and the software continues to work correctly. Regression testing is an expensive process. Three types of cost reduction techniques are used in regression testing. These techniques i.e., test case selection, test suite minimization and test case prioritization are used to reduce the cost of regression testing and improve the rate of fault detection. The focus of our research is on test case prioritization. Instead of minimizing test suite or selecting fewer test cases, test case prioritization orders test cases in such a way that the test cases detecting more faults are executed earlier. In case of limited resources, only top priority test cases are executed to ensure the reliability of the software. In this research, we have proposed an approach which uses path complexity and branch coverage to prioritize test cases based on assumption that the complex code is more likely to contain faults. Halstead's metric has been used to calculate the path complexity of the test cases. Proposed approach is compared with branch coverage based prioritization technique using some example programs. The results show that proposed approach outperforms existing branch coverage based approach in terms of APFD (Average Percentage of Faults Detected) up to 18% on average.},
  keywords={regression testing;test case prioritization},
  doi={10.1109/FIT47737.2019.00074},
  ISSN={2334-3141},
  month={Dec},}@INPROCEEDINGS{7058806,
  author={Hsu, Yen-Ching and Peng, Kuan-Li and Huang, Chin-Yu},
  booktitle={2014 IEEE International Conference on Industrial Engineering and Engineering Management}, 
  title={A study of applying severity-weighted greedy algorithm to software test case prioritization during testing}, 
  year={2014},
  volume={},
  number={},
  pages={1086-1090},
  abstract={Regression testing is a very useful technique for software testing. Traditionally, there are several techniques for test case prioritization; two of the most used techniques are Greedy and Additional Greedy Algorithm (GA and AGA). However, it can be found that they may not consider the severity while prioritizing test cases. In this paper, an Enhanced Additional Greedy Algorithm (EAGA) is proposed for test case prioritization. Experiments with eight subject programs are performed to investigate the effects of different techniques under different criteria and fault severity. Experimental results show that proposed EAGA perform well than other techniques.},
  keywords={Greedy algorithms;Software testing;Fault detection;Software engineering;Software;Schedules;Test case prioritization;code coverage;search algorithm;APFD;APFDc},
  doi={10.1109/IEEM.2014.7058806},
  ISSN={2157-362X},
  month={Dec},}@INPROCEEDINGS{9440156,
  author={Azizi, Maral},
  booktitle={2021 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)}, 
  title={A Tag-based Recommender System for Regression Test Case Prioritization}, 
  year={2021},
  volume={},
  number={},
  pages={146-157},
  abstract={In continuous integration development environments (CI), the software undergoes frequent changes due to bug fixes or new feature requests. Some of these changes may accidentally cause regression issues to the newly released software version. To ensure the correctness of the newly released software, it is important to perform enough testing prior to code submission to avoid breaking builds. Regression testing is one of the important maintenance activities that can control the quality and reliability of modified software, but it can also be very expensive. Test case prioritization can reduce the costs of regression testing by reordering test cases to meet testing objectives better. To date, various test prioritization techniques have been developed, however, the majority of the proposed approaches utilize static or dynamic analyses to decide which test cases should be selected. These analyses often have significant cost overhead and are time consuming. This paper introduces a new method for automatic test case prioritization in a CI environment intending to minimize the testing cost. Our proposed approach uses information retrieval to automatically select test cases based on their textual similarity to the portion of the code that has been changed. Our technique not only helps developers to organize and manage the software repository but also helps them to find the relevant resources quickly. To evaluate our approach, we performed an empirical study using 37 versions of 6 open source applications. The results of our empirical study indicate that our proposed method can improve the effectiveness and efficiency of test case prioritization technique.},
  keywords={Software testing;Conferences;Computer bugs;Maintenance engineering;Information retrieval;Software;Software reliability;Regression Testing;Test Case Prioritization;IR-based Regression Testing;Recommender Systems;Continuous Integration;Tag-based Recommender System},
  doi={10.1109/ICSTW52544.2021.00035},
  ISSN={},
  month={April},}@INPROCEEDINGS{6830456,
  author={Cingiz, M. Özgür and Temei, Şefik and Kahpsız, Oya},
  booktitle={2014 22nd Signal Processing and Communications Applications Conference (SIU)}, 
  title={Test case prioritization with improved genetic algorithm}, 
  year={2014},
  volume={},
  number={},
  pages={1223-1226},
  abstract={In software development, the most time consuming phase is maintenance. Regression testing, which is a part of maintenance, deals with test case prioritization that aims to increase rate of fault detection with less number of tests. In our study, we used 100 tests and 1000 faults; however, faults are detected by tests using genetic algorithm and improved genetic algorithm. After test case prioritization, we may detect all faults with less number of tests so there'll no need to apply all 100 tests (re-test).},
  keywords={Software engineering;Signal processing;Conferences;Genetic algorithms;Software;Maintenance engineering;Testing;Anahtar Kelimeler;regression test;test case prioritization;genetic algorithms;hybrid algorithms},
  doi={10.1109/SIU.2014.6830456},
  ISSN={2165-0608},
  month={April},}@INPROCEEDINGS{7557497,
  author={Ji, Shunhui and Li, Bixin and Zhang, Pengcheng},
  booktitle={2016 IEEE International Conference on Services Computing (SCC)}, 
  title={Test Case Selection for Data Flow Based Regression Testing of BPEL Composite Services}, 
  year={2016},
  volume={},
  number={},
  pages={547-554},
  abstract={BPEL(Business Process Execution Language) composite service evolves a lot in its lifetime. Regression testing must be performed to ensure the correctness of each evolved version. In this article, an approach is proposed to select test cases for regression testing based on data flow testing criterion. With XCFG(eXtended Control Flow Graph) modeling BPEL composite service, the approach improves the traditional data flow analysis to compute the def-use pairs in BPEL process, and then identifies the affected def-use pairs by comparing the def-use pairs and XCFG model in the evolved version with those in the baseline version, where related WSDL(Web Service Description Language) documents are incorporated for comparison. The data flow paths covering the affected def-use pairs are calculated for regression testing, and some of them can reuse the test cases in the baseline version, which are determined by analyzing the path condition of data flow paths between two versions. The proposed approach can detect three kinds of changes, including process change, binding change and interface change. Experimental study shows the effectiveness.},
  keywords={Testing;Data models;Analytical models;Computational modeling;Concurrent computing;Nanoelectromechanical systems;Concrete;Web composite service;regression testing;data flow testing;test case selection},
  doi={10.1109/SCC.2016.77},
  ISSN={},
  month={June},}@INPROCEEDINGS{7724438,
  author={Priyanka and Kumar, Harish and Chauhan, Naresh},
  booktitle={2016 3rd International Conference on Computing for Sustainable Global Development (INDIACom)}, 
  title={A novel approach for selecting an effective regression testing technique}, 
  year={2016},
  volume={},
  number={},
  pages={1122-1125},
  abstract={All software systems need modifications with time, these modifications involve different types or amounts of code modifications in different versions. To validate these modifications many regression testing sessions are needed. But researchers do not have a single regression testing technique that can be used on every version. The objective of this scrutiny is to evolve a methodology that attempts to determine the re-testing technique that would be effective for every re-testing period accounting testing domain and conditions. This methodology is based on Revised Analytical Hierarchy Process (Revised AHP). There are numerous regression testing techniques. But this investigation is limited to test case prioritization techniques only. The result showed that prioritization techniques selected by proposed technique are more efficacious than those used by the forgoing techniques.},
  keywords={Decision making;Matrices;Software testing;Electronic mail;Software systems;multiple criteria decision making approach;Regression testing;Revised Analytical Hierarchy process;Test case prioritization techniques},
  doi={},
  ISSN={},
  month={March},}@INPROCEEDINGS{8281742,
  author={Abid, Robeala and Nadeem, Aamer},
  booktitle={2017 13th International Conference on Emerging Technologies (ICET)}, 
  title={A novel approach to multiple criteria based test case prioritization}, 
  year={2017},
  volume={},
  number={},
  pages={1-6},
  abstract={When software is modified, it is retested to ensure that no new faults have been introduced in the previously tested code and it still works correctly. Such testing is known as regression testing. The cost of regression testing is high because the original program has large number of test cases. It is not feasible to execute all test cases for regression testing. Test suite minimization, test case selection and test case prioritization are cost commonly used techniques in regression testing to reduce the cost of regression testing. While test suite minimization and test case selection techniques select a subset of test cases, test case prioritization does not eliminate any test case, it only orders the test cases with the objective of increasing the fault detection rate. Prioritization is usually preferred over other two approaches because it does not involve the risk of losing useful test cases. Prioritization techniques assign priority to each test case on the basis of some coverage criteria. A number of different single criterion and multiple criteria based prioritization techniques have been proposed in the literature. Multiple criteria based prioritization techniques perform better than single criterion based prioritization techniques. The existing multiple criteria based prioritization techniques combine the criteria in such a way that “Additional” strategy cannot be applied on them. In this paper, we propose a new multiple criteria based test case prioritization algorithm that considers two criteria to prioritize test cases using “Additional” strategy. One criterion is considered as primary and other is considered as secondary. Primary criterion is used to prioritize the test cases whereas secondary criterion is used to break the tie among test cases when two or more test cases provide equal coverage of entities of first criterion. Our proposed multiple criteria based prioritization algorithm performs better than the existing prioritization techniques.},
  keywords={Software;Minimization;Fault detection;Software algorithms;History;Software testing},
  doi={10.1109/ICET.2017.8281742},
  ISSN={},
  month={Dec},}@ARTICLE{8819910,
  author={Bajaj, Anu and Sangwan, Om Prakash},
  journal={IEEE Access}, 
  title={A Systematic Literature Review of Test Case Prioritization Using Genetic Algorithms}, 
  year={2019},
  volume={7},
  number={},
  pages={126355-126375},
  abstract={Regression testing is the essential process of software maintenance and evolution phase of the software development life cycle for assuring the quality and reliability of updated software. Test case prioritization is the technique of regression testing to reduce the time and effort required for regression testing. Search-based algorithms are used to enhance the efficiency and effectiveness of the method. Among these search-based optimization algorithms, genetic algorithms are becoming more popular among researchers since the last decade. In this paper, we are doing a systematic literature review, i.e., a secondary study of test case prioritization using genetic algorithms. The objective of this review is to examine and classify the current state of use of the genetic algorithm in test case prioritization. In other words, to give a base for the advancement of test case prioritization research using genetic algorithms. With the use of the systematic literature review protocol, we selected the most relevant studies (20 out of 384) from the appropriate repositories by using a set of search keywords, inclusion/exclusion criteria and the quality assessment of studies. The data extraction and synthesis process and the taxonomic classification are used to answer the research questions. We also performed a rigorous analysis of the techniques by comparing them on research methodology, the prioritization method, dataset specification, test suite size, types of genetic algorithms used, performance metrics, and the validation criteria. The whole process took four months for comprehensive analysis and classification of primary studies. We observed that the parameter settings, the type of operators, the probabilistic rate of operators, and fitness function design have a significant impact on the quality of the solutions obtained. This systematic literature review yields that genetic algorithms have great potential in solving test case prioritization problems, and the area is open for further improvements. Future researchers can fill the research gaps by following the suggestions given in the review. From this review, we found that the use of the appropriate approach can make a genetic algorithm based test case prioritization one of the effective methods in regression testing.},
  keywords={Genetic algorithms;Software;Systematics;Testing;Sociology;Statistics;Bibliographies;Genetic algorithm;NSGA-II;regression testing;systematic review;test case prioritization},
  doi={10.1109/ACCESS.2019.2938260},
  ISSN={2169-3536},
  month={},}@INPROCEEDINGS{8117002,
  author={Vescan, Andreea and Şerban, Camelia and Chisăliţă-Cretu, Camelia and Dioşan, Laura},
  booktitle={2017 13th IEEE International Conference on Intelligent Computer Communication and Processing (ICCP)}, 
  title={Requirement dependencies-based formal approach for test case prioritization in regression testing}, 
  year={2017},
  volume={},
  number={},
  pages={181-188},
  abstract={Regression testing is the testing activity performed after changes occurred on software. Its aim is to increase confidence that achieved software adjustments have no negative impact on the already functional parts of the software. Test case prioritization is one technique that could be applied in regression testing with the aim to find faults early, resulting in reduced cost and shorten time of testing activities. Thus, prioritizing in the context of regression testing means to re-order test cases such that high priority ones are run first. The current paper addresses the test case prioritization as a consistent part of a larger approach on regression testing, which combines both test case prioritization and test case selection in order to overcome the limitations of each of them. A comprehensive formalization of test case prioritization is provided, incorporating beside the well known ingredients (test case, test requirement, fault, cost) also elements relating to the functional requirements and dependencies between requirements. An evolutionary algorithm is used to construct the re-ordering of test cases, considering as optimization objectives fault detection and cost. A synthetic case study was used to empirically prove our perspective for test case prioritization approach.},
  keywords={Testing;Software;Evolutionary computation;Fault detection;Optimization;Measurement;Search problems},
  doi={10.1109/ICCP.2017.8117002},
  ISSN={},
  month={Sep.},}@INPROCEEDINGS{10499739,
  author={Puviskar, S. Prabath and Wasalthilaka, W.V.S.K. and Kumara, B.T.G.S},
  booktitle={2024 4th International Conference on Advanced Research in Computing (ICARC)}, 
  title={Performance Evaluation of Clustering Algorithms for Enhancing Test Case Prioritization in Regression Testing}, 
  year={2024},
  volume={},
  number={},
  pages={300-305},
  abstract={Regression testing plays a crucial role in maintain software quality as applications evolving and getting more complex. Selection of a regression testing technique significantly influences overall software quality. In initial stages, this involves picking relevant test cases and remove unnecessary redundancies during minimization phase. Finally, prioritization of test cases phases most important ones is executed first which continue process iteratively or whole testing carried out which effect time and cost intensively. Test Case Prioritization method effective way to address the issue. In this study, we proposed approach to enhance Test Case Prioritization by integrating fault based methods and time of execution analysis. The study also evaluates the efficiency in proposed methodology through, employing APFD metric. The study aims to improve the precision and effectiveness of test case prioritization methods, advancing overall quality and reliability in dynamic software development environments. Notably, AHC outperforms in comparisons, showcasing its efficacy in improving outcomes.},
  keywords={Software testing;Performance evaluation;Heuristic algorithms;Scalability;Software algorithms;Clustering algorithms;Termination of employment;Test Case Prioritization;K-Mean;Expectation Maximization;Agglomerative Hierarchical Clustering;Spectral Clustering},
  doi={10.1109/ICARC61713.2024.10499739},
  ISSN={},
  month={Feb},}@INPROCEEDINGS{7962333,
  author={Sun, Chang-Ai and Fan, Cuiyang and Wang, Zhen and Liu, Huai},
  booktitle={2017 IEEE/ACM 12th International Workshop on Automation of Software Testing (AST)}, 
  title={d(mu)Reg: A Path-Aware Mutation Analysis Guided Approach to Regression Testing}, 
  year={2017},
  volume={},
  number={},
  pages={59-64},
  abstract={Regression testing re-runs some previously executed test cases, with the purpose of checking whether previously fixed faults have re-emerged and ensuring that the changes do not negatively affect the existing behaviors of the software under development. Today's software is rapidly developed and evolved, and thus it is critical to implement regression testing quickly and effectively. In this paper, we propose a novel technique for regression testing, based on a family of mutant selection strategies. The preliminary results show that the proposed technique can significantly improve the efficiency of different regression testing activities, including test case reduction and prioritization. Our work also makes it possible to develop a unified framework that effectively implements various activities in regression testing.},
  keywords={Software testing;Schedules;History;Sun;Software systems;regression testing;test case reduction;test case prioritization;mutation analysis;path depth},
  doi={10.1109/AST.2017.8},
  ISSN={},
  month={May},}@INPROCEEDINGS{10199547,
  author={Nithya, B. and Prasanthi, B.G.},
  booktitle={2023 International Conference on Advances in Computing, Communication and Applied Informatics (ACCAI)}, 
  title={Fuzzy and ANN based model for Test case prioritization for Regression testing}, 
  year={2023},
  volume={},
  number={},
  pages={1-9},
  abstract={This research article performs the prioritization of the test case to test the software system after the occurrence of changes for Regression testing. The test expert here will categorize the sets as Optimistic test cases and Pessimistic test cases as formatted data for preprocessing by the Fuzzy rules. The optimistic test cases ensure that they are considered for regression testing by the tester. They are allowed to go into the next phase for deciding the prioritization. The test case is expected to have the details of case_id, case_name, case_details, predicted_result, obtained_result, seconds_time, and status. The ANN model deployed, gives the ranking to only Optimistic test cases by ensuring its capability to a dynamic environment. The efficiency of the regression testing on the proposed ANN model is evaluated by representing the faults, statements, and paths using the average percentage. The results provide a superior value above 95% when compared to the other methods taken in literature survey. The future scope of this ANN-based model can be used for prioritizing, selecting, and categorizing every cycle using reinforcement learning methods.},
  keywords={Surveys;Computational modeling;Reinforcement learning;Software systems;Informatics;Testing;Software testing;Test case prioritization;Regression testing;Fuzzy;ANN;APF;APS;APP},
  doi={10.1109/ACCAI58221.2023.10199547},
  ISSN={},
  month={May},}@INPROCEEDINGS{7273631,
  author={Wang, Hongda and Xing, Jianchun and Yang, Qiliang and Han, Deshuai and Zhang, Xuewei},
  booktitle={2015 IEEE 39th Annual Computer Software and Applications Conference}, 
  title={Modification Impact Analysis Based Test Case Prioritization for Regression Testing of Service-Oriented Workflow Applications}, 
  year={2015},
  volume={2},
  number={},
  pages={288-297},
  abstract={Test case prioritization for regression testing is an approach that schedules test cases to improve the efficiency of service-oriented workflow application testing. Most of existing prioritization approaches range test cases according to various metrics (e.g., Statement coverage, path coverage) in different application context. Service-oriented workflow applications orchestrate web services to provide value-added service and typically are long-running and time-consuming processes. Therefore, these applications need more precise prioritization to execute earlier those test cases that may detect failures. Surprisingly, most of current regression test case prioritization researches neglect to use internal structure information of software, which is a significant factor influencing the prioritization of test cases. Considering the internal structure information and fault propagation behavior of modifications respect to modified version for service-oriented workflow applications, we present in this paper a new regression test case prioritization approach. Our prioritization approach schedules test cases based on dependence analysis of internal activities in service-oriented workflow applications. Experimental results show that test case prioritization using our approach is more effective than conventional coverage-based techniques.},
  keywords={Testing;Correlation;Software;Synchronization;Schedules;Fault detection;Programmable logic arrays;test case prioritization;dependence analysis;service-oriented workflow applications;modification impact},
  doi={10.1109/COMPSAC.2015.11},
  ISSN={0730-3157},
  month={July},}@ARTICLE{10223041,
  author={Nazir, Muhammad and Mehmood, Arif and Aslam, Waqar and Park, Yongwan and Choi, Gyu Sang and Ashraf, Imran},
  journal={IEEE Access}, 
  title={A Multi-Goal Particle Swarm Optimizer for Test Case Prioritization}, 
  year={2023},
  volume={11},
  number={},
  pages={90683-90697},
  abstract={Regression testing is carried out to test the updated supply code within the constraints of time and sources. Since it is very difficult to run all the updated source code every time, test case prioritization is needed to decrease the fee of regression testing. Various methodologies including extensions of white box and black box prioritization, have been presented considering the prioritization of test instances. In this context, the employment of particle swarm optimization (PSO) is usually recommended for test case prioritization. Single test case prioritization focuses to order test cases to maximize objectives like fault detection rate, execution time, etc. Regression testing for single-objective test suite prioritization can become challenging due to its longer execution time. However, test case prioritization for multi-objective functions is a complex and time-consuming task. A check suite may be organized in a certain order by an appropriate technique, subsequently permitting the detection of flaws as early as possible. Multi-goal particle swarm optimization (MOPSO) is used for case prioritization in regression testing. The purpose of MOPSO in this context is to organize the test suite in a specific order that maximizes fault coverage, provides sufficient coverage of test cases, and minimizes execution time. This study proposes an approach based on MOPSO that focuses on maximum fault coverage, most circumstance insurance, and minimal execution time. Experiments are performed using the average percentage of faults detected (APFD) to evaluate its performance. Performance analysis using APFD consisting of no order, opposite order, and random order indicates that the MOPSO surpasses all the previous techniques and obtains an 85% fault coverage. Moreover, MOPSO is better in terms of execution time, fault detection fee, and early detection capabilities.},
  keywords={Testing;Particle swarm optimization;Software algorithms;Costs;Software testing;Genetic algorithms;Fault detection;Test case prioritization;regression testing;particle swarm optimization genetic algorithm;fault detection},
  doi={10.1109/ACCESS.2023.3305973},
  ISSN={2169-3536},
  month={},}@INPROCEEDINGS{7885851,
  author={Ammar, Asmaa and Baharom, Salmi and Ghani, Abdul Azim Abd and Din, Jamilah},
  booktitle={2016 International Conference on Information Science and Security (ICISS)}, 
  title={Enhanced Weighted Method for Test Case Prioritization in Regression Testing Using Unique Priority Value}, 
  year={2016},
  volume={},
  number={},
  pages={1-6},
  abstract={Regression testing is an integral and expensive part in software testing. To reduce its effort, test case prioritization approaches were proposed. The problem with most of the existing approaches is the random ranking of test cases with equal weight. In this paper, an enhanced weighted method to prioritize the full test suite without using random ranking is presented. In addition, a controlled experiment was executed to evaluate the effectiveness of the proposed method. The results show an improved performance in terms of prioritizing test cases and recording higher APFD values over the original weighted method. In future, a larger experiment would be executed to generalize the results.},
  keywords={Software;Software testing;Minimization;Sorting;Computer science;Information technology},
  doi={10.1109/ICISSEC.2016.7885851},
  ISSN={},
  month={Dec},}@INPROCEEDINGS{10507913,
  author={Behera, Aishwaryarani and Acharya, Arup Abhinna and Mohanty, Sanjukta and Panda, Namita},
  booktitle={2024 International Conference on Advancements in Smart, Secure and Intelligent Computing (ASSIC)}, 
  title={Designing a Multi-Class Classification Optimized Model for Requirement based Test Case Prioritization}, 
  year={2024},
  volume={},
  number={},
  pages={1-6},
  abstract={Most of the times we have to test out the entire application functionality, for any code modification done to cater the need of the larger audiences or any bug fixes. This results to consumption of time and the effort to retest the application by executing all of the test suites. In such cases more often regression testing comes to the rescue, where prioritization techniques are being used to overcome the limitations of regression testing. Test Case Prioritization (TCP) usually means categorically ranking some test cases higher than others. The main goal of the TCP is to find the fault early in the testing process by scheduling the test cases with the help of Requirement based Test Case Prioritization Technique (RTCP) in order to increase effectiveness of regression testing. In this research study, we have developed a supervised machine learning based RTCP mechanism where the significant business requirement based relevant feature are considered for scheduling test cases according to their priority label as high, medium and low multi classes. The proposed model is validated with the two datasets collected from internet sources. The machine learning classifier k-Nearest Neighbor (K-NN), Decision Tree (DT), Random Forest (RF) Bagging and Boosting algorithm are utilized to evaluate the features for the test case prioritization. To enhance the performance of the model some hyper parameter settings are altered and found a drastic change in the results. To achieve the low cost and high fault detection rate in RTCP, an optimized model is designed which is validated by datasets and altered parameter settings. The experimental result demonstrates that RF classifier achieved the best performance among the other classifiers for predicting the prioritized test cases early to reduce the cost and time required for regression testing.},
  keywords={Costs;Machine learning algorithms;Codes;Fault detection;Computational modeling;Computer bugs;Tuning;Machine Learning;multi-class classification;Test case prioritization;Regression testing;Requirement based testing;Hyper-Parameter Tuning},
  doi={10.1109/ASSIC60049.2024.10507913},
  ISSN={},
  month={Jan},}@ARTICLE{9269420,
  author={Medhat, Noha and Moussa, Sherin M. and Badr, Nagwa Lotfy and Tolba, Mohamed F.},
  journal={IEEE Access}, 
  title={A Framework for Continuous Regression and Integration Testing in IoT Systems Based on Deep Learning and Search-Based Techniques}, 
  year={2020},
  volume={8},
  number={},
  pages={215716-215726},
  abstract={Tremendous systems are rapidly evolving based on the trendy Internet of Things (IoT) in various domains. Different technologies are used for communication between the massive connected devices through all layers of the IoT system, causing many security and performance issues. Regression and integration testing are considered repeatedly, in which the vast costs and efforts associated with the frequent execution of these inflated test suites hinder the adequate testing of such systems. This necessitates the focus on exploring innovative scalable testing approaches for large test suites in IoT-based systems. In this paper, a scalable framework for continuous integration and regression testing in IoT-based systems (IoT-CIRTF) is proposed, based on IoT-related criteria for test case prioritization and selection. The framework utilizes search-based techniques to provide an optimized prioritized set of test cases to select from. The selection is based on a trained prediction model for IoT standard components using supervised deep learning algorithms to continuously ensure the overall reliability of IoT-based systems. The experiments are held on two GSM datasets. The experimental results achieved prioritization accuracy up to 90% and 92% for regression testing and integration testing respectively. This provides an enhanced and efficient framework for continuous testing of IoT-based systems, as per IoT-related criteria for the prioritization and selection purposes.},
  keywords={Testing;Feature extraction;Deep learning;Protocols;Classification algorithms;Unified modeling language;Tools;Deep learning;integration testing;IoT;regression testing;test case prioritization;test case selection;search-based techniques},
  doi={10.1109/ACCESS.2020.3039931},
  ISSN={2169-3536},
  month={},}@INPROCEEDINGS{8305939,
  author={Fu, Wenhao and Yu, Huiqun and Fan, Guisheng and Ji, Xiang and Pei, Xin},
  booktitle={2017 24th Asia-Pacific Software Engineering Conference (APSEC)}, 
  title={A Regression Test Case Prioritization Algorithm Based on Program Changes and Method Invocation Relationship}, 
  year={2017},
  volume={},
  number={},
  pages={169-178},
  abstract={Regression testing is essential for assuring the quality of a software product. Because rerunning all test cases in regression testing may be impractical under limited resources, test case prioritization is a feasible solution to optimize regression testing by reordering test cases for the current testing version. In this paper, we propose a new test case prioritization algorithm based on program changes and method (function) invocation relationship. Combining the estimated risk value of each program method (function) and the method (function) coverage information, the fault detection capability of each test case can be calculated. The algorithm reduces the prioritization problem to an integer linear programming (ILP) problem, and finally prioritizes test cases according to their fault detection capabilities. Experiments are conducted on 11 programs to validate the effectiveness of our proposed algorithm. Experimental results show that our approach is more effective than some well studied test case prioritization techniques in terms of average percentage of fault detected (APFD) values.},
  keywords={Fault detection;Testing;Greedy algorithms;Software;Software algorithms;Complexity theory;Heuristic algorithms;regression testing;test case prioritization;program changes;method invocation},
  doi={10.1109/APSEC.2017.23},
  ISSN={},
  month={Dec},}@ARTICLE{8705674,
  author={Huang, Rubing and Sun, Weifeng and Chen, Tsong Yueh and Towey, Dave and Chen, Jinfu and Zong, Weiwen and Zhou, Yunan},
  journal={IEEE Transactions on Reliability}, 
  title={Abstract Test Case Prioritization Using Repeated Small-Strength Level-Combination Coverage}, 
  year={2020},
  volume={69},
  number={1},
  pages={349-372},
  abstract={Abstract test cases (ATCs) have been widely used in practice, including in combinatorial testing and in software product line testing. When constructing a set of ATCs, due to limited testing resources in practice (e.g., in regression testing), test case prioritization (TCP) has been proposed to improve the testing quality, aiming at ordering test cases to increase the speed with which faults are detected. One intuitive and extensively studied TCP technique for ATCs is λ-wise Level-combination Coverage based Prioritization (λLCP), a static, black-box prioritization technique that only uses the ATC information to guide the prioritization process. A challenge facing λLCP, however, is the necessity for the selection of the fixed prioritization strength λ before testing-testers need to choose an appropriate λ value before testing begins. Choosing higher λ values may improve the testing effectiveness of λLCP (e.g., by finding faults faster), but may reduce the testing efficiency (by incurring additional prioritization costs). Conversely, choosing lower λ values may improve the efficiency, but may also reduce the effectiveness. In this paper, we propose a new family of λLCP techniques, Repeated Small-strength Level-combination Coverage-based Prioritization (RSLCP), that repeatedly achieves the full combination coverage at lower strengths. RSLCP maintains λLCP's advantages of being static and black box, but avoids the challenge of prioritization strength selection. We have performed an empirical study involving five different versions of each of five C programs. Compared with λLCP, and Incremental-strength LCP (ILCP), our results show that RSLCP could provide a good tradeoff between testing effectiveness and efficiency. Our results also show that RSLCP is more effective and efficient than two popular techniques of Similarity-based Prioritization (SP). In addition, the results of empirical studies also show that RSLCP can remain robust over multiple system releases.},
  keywords={Software testing;Fault detection;Regression analysis;Level set;Abstract test case;level-combination coverage;regression testing;software testing;test case prioritization},
  doi={10.1109/TR.2019.2908068},
  ISSN={1558-1721},
  month={March},}@INPROCEEDINGS{9440161,
  author={Azizi, Maral},
  booktitle={2021 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)}, 
  title={QRTest: Automatic Query Reformulation for Information Retrieval Based Regression Test Case Prioritization}, 
  year={2021},
  volume={},
  number={},
  pages={254-262},
  abstract={The most effective regression testing algorithms have long running times and often require dynamic or static code analysis, making them unsuitable for the modern software development environment where the rate of software delivery could be less than a minute. More recently, some researchers have developed information retrieval-based (IR-based) techniques for prioritizing tests such that the higher similar tests to the code changes have a higher likelihood of finding bugs. A vast majority of these techniques are based on standard term similarity calculation, which can be imprecise. One reason for the low accuracy of these techniques is that the original query often is short, therefore, it does not return the relevant test cases. In such cases, the query needs reformulation. The current state of research lacks methods to increase the quality of the query in the regression testing domain. Our research aims at addressing this problem and we conjecture that enhancing the quality of the queries can improve the performance of IR-based regression test case prioritization (RTP). Our empirical evaluation with six open source programs shows that our approach improves the accuracy of IR-based RTP and increases regression fault detection rate, compared to the common prioritization techniques.},
  keywords={Software testing;Heuristic algorithms;Conferences;Fault detection;Software algorithms;Computer bugs;Information retrieval;Regression Testing;Test Case Prioritization;Software Repository;IR-based Regression Testing;Query Reformulation},
  doi={10.1109/ICSTW52544.2021.00050},
  ISSN={},
  month={April},}@INPROCEEDINGS{9796413,
  author={Greca, Renan and Miranda, Breno and Gligoric, Milos and Bertolino, Antonia},
  booktitle={2022 IEEE/ACM International Conference on Automation of Software Test (AST)}, 
  title={Comparing and Combining File-based Selection and Similarity-based Prioritization towards Regression Test Orchestration}, 
  year={2022},
  volume={},
  number={},
  pages={115-125},
  abstract={Test case selection (TCS) and test case prioritization (TCP) techniques can reduce time to detect the first test failure. Although these techniques have been extensively studied in combination and isolation, they have not been compared one against the other. In this paper, we perform an empirical study directly comparing TCS and TCP approaches, represented by the tools Ekstazi and FAST, respectively. Furthermore, we develop the first combination, named Fastazi, of file-based TCS and similarity-based TCP and evaluate its benefit and cost against each individual technique. We performed our experiments using 12 Java-based open-source projects. Our results show that, in the median case, the combined approach detects the first failure nearly two times faster than either Ekstazi alone (with random test ordering) or FAST alone (without TCS). Statistical analysis shows that the effectiveness of Fastazi is higher than that of Ekstazi, which in turn is higher than that of FAST. On the other hand, FAST adds the least overhead to testing time, while the difference between the additional time needed by Ekstazi and Fastazi is negligible. Fastazi can also improve failure detection in scenarios where the time available for testing is restricted. CCS CONCEPTS • Software and its engineering →Software testing and debugging.},
  keywords={Costs;Automation;Statistical analysis;Diversity reception;Debugging;Open source software;Testing;regression testing;test case selection;test case prioritization;test orchestration;Fastazi},
  doi={10.1145/3524481.3527223},
  ISSN={},
  month={May},}@INPROCEEDINGS{6844270,
  author={Rai, Deepak and Tyagi, Kirti},
  booktitle={2013 International Conference on Recent Trends in Information Technology (ICRTIT)}, 
  title={Estimating the regression test case selection probability using fuzzy rules}, 
  year={2013},
  volume={},
  number={},
  pages={603-611},
  abstract={Software maintenance is performed regularly for enhancing and adapting the functionalities of the existing software, which modifies the software and breaks the previously verified functionalities. This sets a requirement for software regression testing, making it a necessary maintenance activity. As the evolution of software takes place the size of the test suite tends to grow, which makes it difficult to execute the entire test suite in a time constrained environment. There are many existing techniques for regression test case selection. Some are based on dataflow analysis technique, slicing-based technique, bio-inspired techniques, and genetic algorithm based techniques. This paper gives a regression test case selection technique based on fuzzy model, which reduces the size of the test suite by selecting test cases from existing test suite. The test cases, which are necessary for validating the recent changes in the software and have the ability to find the faults and cover maximum coding under testing in minimum time, are selected. A fuzzy model is designed which takes three parameters namely code covered, execution time and faults covered as input and produces the estimation for the test case selection probability as very low, low, medium, high and very high.},
  keywords={Testing;Fuzzy logic;Maintenance engineering;Software maintenance;Market research;Information technology;Regression testing;Test case selection;Fuzzy logic;Selection probability},
  doi={10.1109/ICRTIT.2013.6844270},
  ISSN={},
  month={July},}@INPROCEEDINGS{7375627,
  author={Solanki, Kamna and Singh, Yudhvir and Dalal, Sandeep},
  booktitle={2015 International Conference on Computer, Communication and Control (IC4)}, 
  title={Test case prioritization: An approach based on modified ant colony optimization (m-ACO)}, 
  year={2015},
  volume={},
  number={},
  pages={1-6},
  abstract={Intense and widespread usage of software in every field of life has attracted the researchers to focus their attention on developing the methods to improve the efficiency of software testing; which is the most crucial and cost intensive phase of software development. Software testing aims to uncover the potential faults in Application Under Test by running the test cases on software code. Software code keeps on changing as the uncovered faults during testing are fixed by the developers. Regression testing is concerned with verifying the modified software code to ensure that changes in software code does not induce any undesired effect on rest of the code. Test Case Prioritization is a regression testing technique which re-schedule the execution sequence of test cases to improve the fault detection rate and enhance the performance of regression test suite. This paper focuses on proposing a novel method "m-ACO" for test case prioritization and the performance evaluation of the proposed method using Average Percentage of faults Detected.},
  keywords={Software;Software testing;Ant colony optimization;Optimization;Algorithm design and analysis;Fault detection;Software Testing;Regression Testing;Test Case Prioritization;APFD},
  doi={10.1109/IC4.2015.7375627},
  ISSN={},
  month={Sep.},}@INPROCEEDINGS{8452804,
  author={Choudhary, Ankur and Agrawal, Arun Prakash and Kaur, Arvinder},
  booktitle={2018 IEEE/ACM 11th International Workshop on Search-Based Software Testing (SBST)}, 
  title={An Effective Approach for Regression Test Case Selection Using Pareto Based Multi-Objective Harmony Search}, 
  year={2018},
  volume={},
  number={},
  pages={13-20},
  abstract={Regression testing is a way of catching bugs in new builds and releases to avoid the product risks. Corrective, progressive, retest all and selective regression testing are strategies to perform regression testing. Retesting all existing test cases is one of the most reliable approaches but it is costly in terms of time and effort. This limitation opened a scope to optimize regression testing cost by selecting only a subset of test cases that can detect faults in optimal time and effort. This paper proposes Pareto based Multi-Objective Harmony Search approach for regression test case selection from an existing test suite to achieve some test adequacy criteria. Fault coverage, unique faults covered and algorithm execution time are utilised as performance measures to achieve optimization criteria. The performance evaluation of proposed approach is performed against Bat Search and Cuckoo Search optimization. The results of statistical tests indicate significant improvement over existing approaches.},
  keywords={Optimization;Search problems;Software;Genetic algorithms;Software testing;Software algorithms;Software testing;Regression testing;Optimization;Harmony Search;Bat Search Optimization;Cuckoo Search Optimization;Test case selection},
  doi={},
  ISSN={},
  month={May},}@INPROCEEDINGS{10932075,
  author={Garg, Kamal and Agarwal, Rohit and Shekhar, Shashi},
  booktitle={2024 International Conference on Communication, Control, and Intelligent Systems (CCIS)}, 
  title={Explainable Test Case Prioritization in Continuous Integration through Incremental Learning Approach}, 
  year={2024},
  volume={},
  number={},
  pages={1-6},
  abstract={In Continuous Integration (CI) environments, where software undergoes frequent updates, regression testing is vital in ensuring software quality. However, rerunning every test case becomes impractical with the constant changes. Test Case Prioritization (TCP) addresses this issue, and Machine Learning (ML) is increasingly used to manage regression testing. However, many ML models struggle to adapt to new features or changes in CI and lack transparency, complicating the regression process. To address these issues, we propose an incremental learning-based explainable ML model for TCP in CI environments, which adaptively incorporates new changes. We use SHapley Additive exPlanations (SHAP) to evaluate feature contributions and help testers understand the model's functionality. Our model is trained and tested on 20 open-source software projects. Its performance is assessed using Accuracy and F1 Score, while test case prioritization is evaluated with the Average Percentage of Faults Detected (APFD) and a new metric, the Failed Test Ranking Score (FTRS).},
  keywords={Software testing;Measurement;Adaptation models;Logistic regression;Transfer learning;Refining;Software quality;Continuous integration;Intelligent systems;Open source software;Continuous Integration;Deep Learning Model;Regression Testing;Software Testing;Test case Prioritization},
  doi={10.1109/CCIS63231.2024.10932075},
  ISSN={},
  month={Dec},}@INPROCEEDINGS{7273420,
  author={Zhao, Xiaobin and Wang, Zan and Fan, Xiangyu and Wang, Zhenhua},
  booktitle={2015 IEEE 39th Annual Computer Software and Applications Conference}, 
  title={A Clustering-Bayesian Network Based Approach for Test Case Prioritization}, 
  year={2015},
  volume={3},
  number={},
  pages={542-547},
  abstract={Test case prioritization can effectively reduce the cost of regression testing by executing test cases with respect to their contributions to testing goals. Previous research has proved that the Bayesian Networks based technique which uses source code change information, software quality metrics and test coverage data has better performance than those methods merely depending on only one of the items above. Although the former Bayesian Networks based Test Case Prioritization (BNTCP) focusing on assessing the fault detection capability of each test case can utilize all three items above, it still has a deficiency that ignores the similarity between test cases. For mitigating this problem, this paper proposes a hybrid regression test case prioritization technique which aims to achieve better prioritization by incorporating code coverage based clustering approach with BNTCP to depress the impact of those similar test cases having common code coverage. Experiments on two Java projects with mutation faults and one Java project with hand-seeded faults have been conducted to evaluate the fault detection performance of the proposed approach against Additional Greedy approach, Bayesian Networks based approach (BNTCP), Bayesian Networks based approach with feedback (BNA) and code coverage based clustering approach. The experimental results showed that the proposed approach is promising.},
  keywords={Fault detection;Measurement;Testing;Bayes methods;Software quality;Java;Clustering algorithms;Regression testing; Test case prioritization (TCP); Clustering; Bayesian Network (BN)},
  doi={10.1109/COMPSAC.2015.154},
  ISSN={0730-3157},
  month={July},}@INPROCEEDINGS{10298744,
  author={Rotaru, Ioana-Claudia and Vescan, Andreea},
  booktitle={2023 38th IEEE/ACM International Conference on Automated Software Engineering Workshops (ASEW)}, 
  title={Test Case Prioritization Based on Neural Network Classification with Artifacts Traceability}, 
  year={2023},
  volume={},
  number={},
  pages={78-87},
  abstract={Regression testing is an important factor in ensuring software system reliability once new changes are introduced, but maintaining complex testing suites in continuous integration environments is challenging. Test case prioritization techniques are a potential solution to this problem by computing a reordered testing suite that can provide better fault detection capabilities. However, current methods rely on manually providing artifact dependencies (requirements to code, code to test cases, test cases to faults) as input. The purpose of this paper is to minimize the gap between automatic dependency computation and test case prioritization by analyzing how Behavior-Driven Development (BDD) practices affect the two tasks. Thus, the first contribution of this paper is related to the design and implementation of an automatic traceability component to retrieve dependencies based on BDD artifacts (requirements, source code, test cases, and faults). The second contribution refers to the integration of the discovered traces as features in a neural network classification model for test cases for further prioritization. Various architectures were used for the neural network classification model. Two real-world BDD projects were used for the validation of the models, comparing the best-performing models with a baseline test case prioritization technique to assess their fault-detection capabilities. Our approach achieved promising fault detection rates that demonstrate the efficiency of automatic traceability and may lead to future applicability to large-scale projects.},
  keywords={Measurement;Codes;Fault detection;Source coding;Neural networks;Training data;Computer architecture;Regression Testing;Test Case Prioritization;Artifact Traceability;Behavior-Driven Development},
  doi={10.1109/ASEW60602.2023.00015},
  ISSN={2151-0849},
  month={Sep.},}@ARTICLE{9328763,
  author={Huang, Yechao and Shu, Ting and Ding, Zuohua},
  journal={IEEE Access}, 
  title={A Learn-to-Rank Method for Model-Based Regression Test Case Prioritization}, 
  year={2021},
  volume={9},
  number={},
  pages={16365-16382},
  abstract={Regression testing plays an indispensable role in software maintenance, which refers to retest the software following modifications to determine whether the changes have introduced new faults. However, regression testing requires massive amounts of effort to achieve a high fault detection rate. To address this issue, the test case prioritization technique is used to improve the fault detection rate by adjusting the execution order of test cases. For model-based regression test case prioritization, existing approaches have been developed using the single aspect of model-related information extracted from the previous executed test cases. In this paper, a novel learn-to-rank technique is proposed to prioritize test cases by combining the multidimensional features of Extended Finite State Machine (EFSM) under test to improve fault detection rate. Specifically, our method utilizes the random forest algorithm to combine multiple existing heuristic prioritization methods. Detailed experiments are conducted to evaluate the proposed method's performance in terms of Average Percentage Fault Detected (APFD). The experimental results show that the mean APFD value of our method reaches 0.884 for five subject EFSMs, which is 33.9% higher than the compared methods.},
  keywords={Testing;Unified modeling language;Software;Fault detection;Software algorithms;Monitoring;Heuristic algorithms;Regression testing;model based testing;EFSM;test case prioritization;learn to rank},
  doi={10.1109/ACCESS.2021.3053163},
  ISSN={2169-3536},
  month={},}@INPROCEEDINGS{9787970,
  author={Abdelkarim, Mohamed and ElAdawi, Reem},
  booktitle={2022 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)}, 
  title={TCP-Net: Test Case Prioritization using End-to-End Deep Neural Networks}, 
  year={2022},
  volume={},
  number={},
  pages={122-129},
  abstract={Regression testing is facing a bottleneck due to the growing number of test cases and the wide adoption of continuous integration (CI) in software projects, which increases the frequency of running software builds, making it challenging to run all the regression test cases. Machine learning (ML) techniques can be used to save time and hardware resources without compromising quality. In this work, we introduce a novel end-to-end, self-configurable, and incremental learning deep neural network (DNN) tool for test case prioritization (TCP-Net). TCP-Net is fed with source code-related features, test case metadata, test case coverage information, and test case failure history, to learn a high dimensional correlation between source files and test cases. We experimentally show that TCP-Net can be efficiently used for test case prioritization by evaluating it on three different real-life industrial software packages.},
  keywords={Deep learning;Software testing;Correlation;Software packages;Conferences;Neural networks;Metadata;regression testing;test case prioritization;neural networks;deep learning;fusion network;incremental learning;hyperparameter optimization},
  doi={10.1109/ICSTW55395.2022.00034},
  ISSN={2159-4848},
  month={April},}@INPROCEEDINGS{8855691,
  author={Zhang, Weixiang and Qi, Yuhua and Zhang, Xuebo and Wei, Bo and Zhang, Min and Dou, Zhaohui},
  booktitle={2019 IEEE 21st International Conference on High Performance Computing and Communications; IEEE 17th International Conference on Smart City; IEEE 5th International Conference on Data Science and Systems (HPCC/SmartCity/DSS)}, 
  title={On Test Case Prioritization Using Ant Colony Optimization Algorithm}, 
  year={2019},
  volume={},
  number={},
  pages={2767-2773},
  abstract={Test case prioritization technology improves the efficiency of software testing by optimizing the execution order of test cases, which is an important research topic of software regression testing. In order to solve the problem of requirement-based test case prioritization, this paper proposed a solution based on ant colony optimization algorithm and gave its two different implementation methods: distance-based and index-based implementation. Firstly, a general indicator based on requirements was designed to evaluate the test cases. Secondly, the concept of test case attractivity was proposed, and the definition of the distance between test cases was given based on it. Finally, the main design strategies such as the pheromone update strategy, the optimal solution update strategy, and the local optimal mutation strategy were given. The experimental results show that the method has good global optimization ability, and its overall effect is better than particle swarm optimization algorithm, genetic algorithm and random testing.},
  keywords={Testing;Optimization;Urban areas;Software;Sorting;Software algorithms;Indexes;Software Testing, Test Case Prioritization, Ant Colony Algorithm, Black Box Testing, Regression Testing},
  doi={10.1109/HPCC/SmartCity/DSS.2019.00388},
  ISSN={},
  month={Aug},}@INPROCEEDINGS{8029584,
  author={Huang, Rubing and Zhou, Yunan and Zong, Weiwen and Towey, Dave and Chen, Jinfu},
  booktitle={2017 IEEE 41st Annual Computer Software and Applications Conference (COMPSAC)}, 
  title={An Empirical Comparison of Similarity Measures for Abstract Test Case Prioritization}, 
  year={2017},
  volume={1},
  number={},
  pages={3-12},
  abstract={Test case prioritization (TCP) attempts to order test cases such that those which are more important, according to some criterion or measurement, are executed earlier. TCP has been applied in many testing situations, including, for example, regression testing. An abstract test case (also called a model input) is an important type of test case, and has been widely used in practice, such as in configurable systems and software product lines. Similarity-based test case prioritization (STCP) has been proven to be cost-effective for abstract test cases (ATCs), but because there are many similarity measures which could be used to evaluate ATCs and to support STCP, we face the following question: How can we choose the similarity measure(s) for prioritizing ATCs that will deliver the most effective results? To address this, we studied fourteen measures and two popular STCP algorithms - local STCP (LSTCP), and global STCP (GSTCP). We also conducted an empirical study of five realworld programs, and investigated the efficacy of each similarity measure, according to the interaction coverage rate and fault detection rate. The results of these studies show that GSTCP outperforms LSTCP - in 61% to 84% of the cases, in terms of interaction coverage rates; and in 76% to 78% of the cases with respect to fault detection rates. Our studies also show that Overlap, the simplest similarity measure examined in this study, could obtain the overall best performance for LSTCP; and that Goodall3 has the best performance for GSTCP.},
  keywords={Testing;Fault detection;Software;Computer science;Software product lines;Fault diagnosis;Algorithm design and analysis;Software testing;test case prioritization;abstract test case;similarity},
  doi={10.1109/COMPSAC.2017.271},
  ISSN={0730-3157},
  month={July},}@INPROCEEDINGS{7838169,
  author={Lachmann, Remo and Schulze, Sandro and Nieke, Manuel and Seidl, Christoph and Schaefer, Ina},
  booktitle={2016 15th IEEE International Conference on Machine Learning and Applications (ICMLA)}, 
  title={System-Level Test Case Prioritization Using Machine Learning}, 
  year={2016},
  volume={},
  number={},
  pages={361-368},
  abstract={Regression testing is the common task of retesting software that has been changed or extended (e.g., by new features) during software evolution. As retesting the whole program is not feasible with reasonable time and cost, usually only a subset of all test cases is executed for regression testing, e.g., by executing test cases according to test case prioritization. Although a vast amount of methods for test case prioritization exist, they mostly require access to source code (i.e., white-box). However, in industrial practice, system-level testing is an important task that usually grants no access to source code (i.e., black-box). Hence, for an effective regression testing process, other information has to be employed. In this paper, we introduce a novel technique for test case prioritization for manual system-level regression testing based on supervised machine learning. Our approach considers black-box meta-data, such as test case history, as well as natural language test case descriptions for prioritization. We use the machine learning algorithm SVM Rank to evaluate our approach by means of two subject systems and measure the prioritization quality. Our results imply that our technique improves the failure detection rate significantly compared to a random order. In addition, we are able to outperform a test case order given by a test expert. Moreover, using natural language descriptions improves the failure finding rate.},
  keywords={Testing;Support vector machines;Software;Training data;Natural languages;Dictionaries;Training;System-Level Testing;Black-Box Testing;Test Case Prioritization;Supervised Machine Learning},
  doi={10.1109/ICMLA.2016.0065},
  ISSN={},
  month={Dec},}@INPROCEEDINGS{6569743,
  author={Arafeen, Md. Junaid and Do, Hyunsook},
  booktitle={2013 IEEE Sixth International Conference on Software Testing, Verification and Validation}, 
  title={Test Case Prioritization Using Requirements-Based Clustering}, 
  year={2013},
  volume={},
  number={},
  pages={312-321},
  abstract={The importance of using requirements information in the testing phase has been well recognized by the requirements engineering community, but to date, a vast majority of regression testing techniques have primarily relied on software code information. Incorporating requirements information into the current testing practice could help software engineers identify the source of defects more easily, validate the product against requirements, and maintain software products in a holistic way. In this paper, we investigate whether the requirements-based clustering approach that incorporates traditional code analysis information can improve the effectiveness of test case prioritization techniques. To investigate the effectiveness of our approach, we performed an empirical study using two Java programs with multiple versions and requirements documents. Our results indicate that the use of requirements information during the test case prioritization process can be beneficial.},
  keywords={Testing;Software;Measurement;Complexity theory;Fault detection;Educational institutions;Java;regression testing;test case prioritization;requirements-based clustering;empirical study},
  doi={10.1109/ICST.2013.12},
  ISSN={2159-4848},
  month={March},}@INPROCEEDINGS{9870238,
  author={Bajaj, Anu and Abraham, Ajith},
  booktitle={2022 IEEE Congress on Evolutionary Computation (CEC)}, 
  title={Test Case Prioritization and Reduction Using Hybrid Quantum-behaved Particle Swarm Optimization}, 
  year={2022},
  volume={},
  number={},
  pages={1-8},
  abstract={Regression testing is an integral part of the software evolution and maintenance phase as it ensures that the modified software is working correctly after any upgrades. Test case prioritization and reduction minimize cost and effort needed for retesting by scheduling critical test cases before the less critical ones and removing redundant test cases. The criticality and redundancy of the test cases depend on several testing criteria. This paper empirically analyzed the effect of different testing criteria like code and fault coverage on the techniques' performance. This paper proposed a discrete Quantum-behaved particle swarm optimization (QPSO) for enhancing efficiency of test case prioritization. The algorithm is improved by replacing the random distribution with Gaussian probability to escape from the local optima. The evolution stagnation issue is further resolved by hybridizing it with genetic algorithm (QPSO-GA). In addition to prioritizing the test cases, the algorithm also reduces the test suite size through the test suite reduction approach. The experiments are conducted on different versions of three pro-grams from the open-source software infrastructure repository. The performance is compared with the average percentage of statement coverage, fault detection, and their combinations with the cost. Consequently, suite reduction, fault detection capability losses, and coverage loss percentage are also drawn for test suite reduction. The proposed algorithms outperformed the random search, ant colony optimization, differential evolution, GA, PSO, and adaptive PSO for all the evaluation metrics.},
  keywords={Costs;Fault detection;Software algorithms;Redundancy;Software quality;Proposals;Particle swarm optimization;regression testing;nature-inspired algorithms;test case prioritization;test suite reduction;particle swarm optimization;QPSO},
  doi={10.1109/CEC55065.2022.9870238},
  ISSN={},
  month={July},}@INPROCEEDINGS{9700308,
  author={Chen, Jinfu and Gu, Yuechao and Cai, Saihua and Chen, Haibo and Chen, Jingyi},
  booktitle={2021 IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW)}, 
  title={KS-TCP: An Efficient Test Case Prioritization Approach based on K-medoids and Similarity}, 
  year={2021},
  volume={},
  number={},
  pages={105-110},
  abstract={Test case prioritization (TCP) tries to find an optimal execution sequence by adjusting test cases that need to be executed. Traditional techniques rely on code coverage information to achieve effective results, but they need access to historical execution information. The string distance-based test case prioritization (SD-TCP) can avoid these limitations through only using the test cases themselves for sorting, but it is sensitive to extreme test cases and inefficient. To overcome these problems, we propose a test case prioritization method based on K-medoids and Similarity (KS-TCP). The proposed KS-TCP approach considers sorting a set of test cases rather than individual test case to effectively avoid the effect of extreme test cases, it uses cluster analysis and greedy strategy to divide the subsets and compose the final execution sequence by polling. Extensive experimental results show that the proposed KS-TCP approach has a higher APFD value compared to Random Prioritization (RP) and SD-TCP, and it also outperforms SD-TCP in terms of better time efficiency on test case prioritization.},
  keywords={Greedy algorithms;Codes;Conferences;Clustering methods;Software algorithms;Software reliability;Sorting;Regression testing;Test case prioritization;Cluster analysis;Greedy algorithm},
  doi={10.1109/ISSREW53611.2021.00051},
  ISSN={},
  month={Oct},}@INPROCEEDINGS{7219790,
  author={Klindee, Piyakarn and Prompoon, Nakornthip},
  booktitle={2015 12th International Joint Conference on Computer Science and Software Engineering (JCSSE)}, 
  title={Test cases prioritization for software regression testing using analytic hierarchy process}, 
  year={2015},
  volume={},
  number={},
  pages={168-173},
  abstract={Test cases are considered an important asset in the software testing process since they are used to detect defects in the software. In order to produce quality software covering all of the requirements, the test case designer requires much time and effort in designing test cases to cover all requirements and conditions according to the test case structure. This research proposes a method for storing and retrieving of test cases affected by software requirements changes, as well as ranking the retrieved test cases using the AHP method to improve the quality of the ranking. There are to assist system testers in identifying test cases for complete regression testing. An example application of the proposed method will also be presented.},
  keywords={Software;Indexes;Complexity theory;Analytic hierarchy process;Software testing;Computer aided software engineering;Analytical Hierarchy Process;AHP;Information Retrieval;Prioritization Technique;Regression Testing;Test Case Prioritization},
  doi={10.1109/JCSSE.2015.7219790},
  ISSN={},
  month={July},}
